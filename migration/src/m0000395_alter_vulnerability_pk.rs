use sea_orm_migration::prelude::*;

#[derive(DeriveMigrationName)]
pub struct Migration;

#[async_trait::async_trait]
impl MigrationTrait for Migration {
    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        // -- VulnerabilityDescription

        manager
            .alter_table(
                Table::alter()
                    .table(VulnerabilityDescription::Table)
                    .add_column(
                        ColumnDef::new(VulnerabilityDescription::VulnerabilityIdentifier)
                            .string()
                            .not_null(),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .get_connection()
            .execute_unprepared(
                r#"
                UPDATE vulnerability_description
                SET vulnerability_identifier = vulnerability.identifier
                FROM vulnerability
                WHERE vulnerability_description.vulnerability_id = vulnerability.id
                "#,
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(VulnerabilityDescription::Table)
                    .drop_column(VulnerabilityDescription::VulnerabilityId)
                    .to_owned(),
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(VulnerabilityDescription::Table)
                    .rename_column(
                        VulnerabilityDescription::VulnerabilityIdentifier,
                        VulnerabilityDescription::VulnerabilityId,
                    )
                    .to_owned(),
            )
            .await?;

        // -- Cvss3

        manager
            .alter_table(
                Table::alter()
                    .table(Cvss3::Table)
                    .add_column(
                        ColumnDef::new(Cvss3::VulnerabilityIdentifier)
                            .string()
                            .not_null(),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .get_connection()
            .execute_unprepared(
                r#"
                UPDATE cvss3
                SET vulnerability_identifier = vulnerability.identifier
                FROM vulnerability
                WHERE cvss3.vulnerability_id = vulnerability.id
                "#,
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(Cvss3::Table)
                    .drop_column(Cvss3::VulnerabilityId)
                    .to_owned(),
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(Cvss3::Table)
                    .rename_column(Cvss3::VulnerabilityIdentifier, Cvss3::VulnerabilityId)
                    .to_owned(),
            )
            .await?;

        // -- Cvss4

        manager
            .alter_table(
                Table::alter()
                    .table(Cvss4::Table)
                    .add_column(
                        ColumnDef::new(Cvss4::VulnerabilityIdentifier)
                            .string()
                            .not_null(),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .get_connection()
            .execute_unprepared(
                r#"
                UPDATE cvss4
                SET vulnerability_identifier = vulnerability.identifier
                FROM vulnerability
                WHERE cvss4.vulnerability_id = vulnerability.id
                "#,
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(Cvss4::Table)
                    .drop_column(Cvss4::VulnerabilityId)
                    .to_owned(),
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(Cvss4::Table)
                    .rename_column(Cvss4::VulnerabilityIdentifier, Cvss4::VulnerabilityId)
                    .to_owned(),
            )
            .await?;

        // -- AdvisoryVulnerability

        manager
            .alter_table(
                Table::alter()
                    .table(AdvisoryVulnerability::Table)
                    .add_column(
                        ColumnDef::new(AdvisoryVulnerability::VulnerabilityIdentifier)
                            .string()
                            .not_null(),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .get_connection()
            .execute_unprepared(
                r#"
                UPDATE advisory_vulnerability
                SET vulnerability_identifier = vulnerability.identifier
                FROM vulnerability
                WHERE advisory_vulnerability.vulnerability_id = vulnerability.id
                "#,
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(AdvisoryVulnerability::Table)
                    .drop_column(AdvisoryVulnerability::VulnerabilityId)
                    .to_owned(),
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(AdvisoryVulnerability::Table)
                    .rename_column(
                        AdvisoryVulnerability::VulnerabilityIdentifier,
                        AdvisoryVulnerability::VulnerabilityId,
                    )
                    .to_owned(),
            )
            .await?;

        // -- PackageStatus

        manager
            .alter_table(
                Table::alter()
                    .table(PackageStatus::Table)
                    .add_column(
                        ColumnDef::new(PackageStatus::VulnerabilityIdentifier)
                            .string()
                            .not_null(),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .get_connection()
            .execute_unprepared(
                r#"
                UPDATE package_status
                SET vulnerability_identifier = vulnerability.identifier
                FROM vulnerability
                WHERE package_status.vulnerability_id = vulnerability.id
                "#,
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(PackageStatus::Table)
                    .drop_column(PackageStatus::VulnerabilityId)
                    .to_owned(),
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(PackageStatus::Table)
                    .rename_column(
                        PackageStatus::VulnerabilityIdentifier,
                        PackageStatus::VulnerabilityId,
                    )
                    .to_owned(),
            )
            .await?;

        // -- Drop the column from Vulnerability

        manager
            .get_connection()
            .execute_unprepared(
                r#"
                ALTER TABLE vulnerability DROP CONSTRAINT vulnerability_pkey CASCADE
                "#,
            )
            .await?;

        manager
            .get_connection()
            .execute_unprepared(
                r#"
                DROP INDEX IF EXISTS vulnerability_pkey
                "#,
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(Vulnerability::Table)
                    .drop_column(Vulnerability::Id)
                    .to_owned(),
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(Vulnerability::Table)
                    .rename_column(Vulnerability::Identifier, Vulnerability::Id)
                    .to_owned(),
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(Vulnerability::Table)
                    .modify_column(ColumnDef::new(Vulnerability::Id).primary_key())
                    .to_owned(),
            )
            .await?;

        Ok(())
    }

    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .get_connection()
            .execute_unprepared(
                r#"
                ALTER TABLE vulnerability DROP CONSTRAINT vulnerability_pkey CASCADE
                "#,
            )
            .await?;

        manager
            .get_connection()
            .execute_unprepared(
                r#"
                DROP INDEX IF EXISTS vulnerability_pkey
                "#,
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(Vulnerability::Table)
                    .rename_column(Vulnerability::Id, Vulnerability::Identifier)
                    .to_owned(),
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(Vulnerability::Table)
                    .add_column(
                        ColumnDef::new(Vulnerability::Id)
                            .integer()
                            .auto_increment()
                            .primary_key(),
                    )
                    .to_owned(),
            )
            .await?;

        // -- AdvisoryVulnerability

        manager
            .alter_table(
                Table::alter()
                    .table(AdvisoryVulnerability::Table)
                    .rename_column(
                        AdvisoryVulnerability::VulnerabilityId,
                        AdvisoryVulnerability::VulnerabilityIdentifier,
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(AdvisoryVulnerability::Table)
                    .add_column(
                        ColumnDef::new(AdvisoryVulnerability::VulnerabilityId)
                            .integer()
                            .not_null(),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .get_connection()
            .execute_unprepared(
                r#"
                UPDATE advisory_vulnerability
                SET vulnerability_id = vulnerability.id
                FROM vulnerability
                WHERE advisory_vulnerability.vulnerability_identifier = vulnerability.identifier
                "#,
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(AdvisoryVulnerability::Table)
                    .drop_column(AdvisoryVulnerability::VulnerabilityIdentifier)
                    .to_owned(),
            )
            .await?;

        // -- PackageStatus

        manager
            .alter_table(
                Table::alter()
                    .table(PackageStatus::Table)
                    .rename_column(
                        PackageStatus::VulnerabilityId,
                        PackageStatus::VulnerabilityIdentifier,
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(PackageStatus::Table)
                    .add_column(
                        ColumnDef::new(PackageStatus::VulnerabilityId)
                            .integer()
                            .not_null(),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .get_connection()
            .execute_unprepared(
                r#"
                UPDATE package_status
                SET vulnerability_id = vulnerability.id
                FROM vulnerability
                WHERE package_status.vulnerability_identifier = vulnerability.identifier
                "#,
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(PackageStatus::Table)
                    .drop_column(PackageStatus::VulnerabilityIdentifier)
                    .to_owned(),
            )
            .await?;

        // -- Cvss3

        manager
            .alter_table(
                Table::alter()
                    .table(Cvss3::Table)
                    .rename_column(Cvss3::VulnerabilityId, Cvss3::VulnerabilityIdentifier)
                    .to_owned(),
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(Cvss3::Table)
                    .add_column(ColumnDef::new(Cvss3::VulnerabilityId).integer().not_null())
                    .to_owned(),
            )
            .await?;

        manager
            .get_connection()
            .execute_unprepared(
                r#"
                UPDATE cvss3
                SET vulnerability_id = vulnerability.id
                FROM vulnerability
                WHERE cvss3.vulnerability_identifier = vulnerability.identifier
                "#,
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(Cvss3::Table)
                    .drop_column(Cvss3::VulnerabilityIdentifier)
                    .to_owned(),
            )
            .await?;

        // -- Cvss4

        manager
            .alter_table(
                Table::alter()
                    .table(Cvss4::Table)
                    .rename_column(Cvss4::VulnerabilityId, Cvss4::VulnerabilityIdentifier)
                    .to_owned(),
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(Cvss4::Table)
                    .add_column(ColumnDef::new(Cvss4::VulnerabilityId).integer().not_null())
                    .to_owned(),
            )
            .await?;

        manager
            .get_connection()
            .execute_unprepared(
                r#"
                UPDATE cvss4
                SET vulnerability_id = vulnerability.id
                FROM vulnerability
                WHERE cvss4.vulnerability_identifier = vulnerability.identifier
                "#,
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(Cvss4::Table)
                    .drop_column(Cvss4::VulnerabilityIdentifier)
                    .to_owned(),
            )
            .await?;

        // -- VulnerabilityDescription

        manager
            .alter_table(
                Table::alter()
                    .table(VulnerabilityDescription::Table)
                    .rename_column(
                        VulnerabilityDescription::VulnerabilityId,
                        VulnerabilityDescription::VulnerabilityIdentifier,
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(VulnerabilityDescription::Table)
                    .add_column(
                        ColumnDef::new(VulnerabilityDescription::VulnerabilityId)
                            .integer()
                            .not_null(),
                    )
                    .to_owned(),
            )
            .await?;

        manager
            .get_connection()
            .execute_unprepared(
                r#"
                UPDATE vulnerability_description
                SET vulnerability_id = vulnerability.id
                FROM vulnerability
                WHERE vulnerability_description.vulnerability_identifier = vulnerability.identifier
                "#,
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(VulnerabilityDescription::Table)
                    .drop_column(VulnerabilityDescription::VulnerabilityIdentifier)
                    .to_owned(),
            )
            .await?;

        Ok(())
    }
}

#[derive(DeriveIden)]
enum Vulnerability {
    Table,
    Id,
    Identifier,
}

#[derive(DeriveIden)]
enum VulnerabilityDescription {
    Table,
    VulnerabilityId,
    VulnerabilityIdentifier,
}

#[derive(DeriveIden)]
enum Cvss3 {
    Table,
    VulnerabilityId,
    VulnerabilityIdentifier,
}

#[derive(DeriveIden)]
enum Cvss4 {
    Table,
    VulnerabilityId,
    VulnerabilityIdentifier,
}

#[derive(DeriveIden)]
enum AdvisoryVulnerability {
    Table,
    VulnerabilityId,
    VulnerabilityIdentifier,
}

#[derive(DeriveIden)]
enum PackageStatus {
    Table,
    VulnerabilityId,
    VulnerabilityIdentifier,
}
