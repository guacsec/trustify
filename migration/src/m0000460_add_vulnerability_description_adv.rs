use sea_orm_migration::prelude::*;

#[derive(DeriveMigrationName)]
pub struct Migration;

const FK_NAME: &str = "fk_adv_vuln";

#[async_trait::async_trait]
impl MigrationTrait for Migration {
    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .get_connection()
            .execute_unprepared(
                r#"
        ALTER TABLE advisory_vulnerability
        ADD PRIMARY KEY (advisory_id, vulnerability_id)
        "#,
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(VulnerabilityDescription::Table)
                    .add_column(
                        ColumnDef::new(VulnerabilityDescription::AdvisoryId)
                            .uuid()
                            .not_null(),
                    )
                    .add_foreign_key(
                        &TableForeignKey::new()
                            .name(FK_NAME)
                            .from_tbl(VulnerabilityDescription::Table)
                            .from_col(VulnerabilityDescription::AdvisoryId)
                            .from_col(VulnerabilityDescription::VulnerabilityId)
                            .to_tbl(AdvisoryVulnerability::Table)
                            .to_col(AdvisoryVulnerability::AdvisoryId)
                            .to_col(AdvisoryVulnerability::VulnerabilityId)
                            .on_delete(ForeignKeyAction::Cascade),
                    )
                    .to_owned(),
            )
            .await?;

        Ok(())
    }

    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .alter_table(
                Table::alter()
                    .table(VulnerabilityDescription::Table)
                    .drop_foreign_key(Alias::new(FK_NAME))
                    .drop_column(VulnerabilityDescription::AdvisoryId)
                    .to_owned(),
            )
            .await?;

        manager
            .get_connection()
            .execute_unprepared(
                r#"
        ALTER TABLE advisory_vulnerability
        DROP CONSTRAINT advisory_vulnerability_pkey
        "#,
            )
            .await?;

        Ok(())
    }
}

#[derive(DeriveIden)]
pub enum VulnerabilityDescription {
    Table,
    // --
    AdvisoryId,
    VulnerabilityId,
}

#[derive(DeriveIden)]
pub enum AdvisoryVulnerability {
    Table,
    // --
    AdvisoryId,
    VulnerabilityId,
}
