use sea_orm_migration::prelude::*;

#[derive(DeriveMigrationName)]
pub struct Migration;

#[async_trait::async_trait]
impl MigrationTrait for Migration {
    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        // Replace the sample below with your own migration scripts
        manager
            .alter_table(
                Table::alter()
                    .table(AdvisoryVulnerability::Table)
                    .add_column(ColumnDef::new(AdvisoryVulnerability::Title).string())
                    .add_column(ColumnDef::new(AdvisoryVulnerability::Summary).string())
                    .add_column(ColumnDef::new(AdvisoryVulnerability::Description).string())
                    .add_column(
                        ColumnDef::new(AdvisoryVulnerability::DiscoveryDate)
                            .timestamp_with_time_zone(),
                    )
                    .add_column(
                        ColumnDef::new(AdvisoryVulnerability::ReleaseDate)
                            .timestamp_with_time_zone(),
                    )
                    .to_owned(),
            )
            .await
    }

    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .alter_table(
                Table::alter()
                    .drop_column(AdvisoryVulnerability::Title)
                    .drop_column(AdvisoryVulnerability::Summary)
                    .drop_column(AdvisoryVulnerability::Description)
                    .drop_column(AdvisoryVulnerability::DiscoveryDate)
                    .drop_column(AdvisoryVulnerability::ReleaseDate)
                    .to_owned(),
            )
            .await
    }
}

#[derive(DeriveIden)]
pub enum AdvisoryVulnerability {
    Table,
    Title,
    Summary,
    Description,
    DiscoveryDate,
    ReleaseDate,
}
