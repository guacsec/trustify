use sea_orm_migration::prelude::*;

#[derive(DeriveMigrationName)]
pub struct Migration;

#[async_trait::async_trait]
impl MigrationTrait for Migration {
    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .alter_table(
                Table::alter()
                    .table(Vulnerability::Table)
                    .add_column(ColumnDef::new(Vulnerability::BaseScore).double())
                    .to_owned(),
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(Vulnerability::Table)
                    .add_column(ColumnDef::new(Vulnerability::BaseSeverity).enumeration(
                        Cvss3Severity::Cvss3Severity,
                        [
                            Cvss3Severity::None,
                            Cvss3Severity::Low,
                            Cvss3Severity::Medium,
                            Cvss3Severity::High,
                            Cvss3Severity::Critical,
                        ],
                    ))
                    .to_owned(),
            )
            .await?;

        manager
            .get_connection()
            .execute_unprepared(include_str!("m0001070_vulnerability_scores.sql"))
            .await
            .map(|_| ())?;

        Ok(())
    }

    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .alter_table(
                Table::alter()
                    .table(Vulnerability::Table)
                    .drop_column(Vulnerability::BaseScore)
                    .to_owned(),
            )
            .await?;

        manager
            .alter_table(
                Table::alter()
                    .table(Vulnerability::Table)
                    .drop_column(Vulnerability::BaseSeverity)
                    .to_owned(),
            )
            .await?;

        Ok(())
    }
}

#[derive(DeriveIden)]
enum Vulnerability {
    Table,
    BaseScore,
    BaseSeverity,
}

#[allow(clippy::enum_variant_names)]
#[derive(DeriveIden)]
pub enum Cvss3Severity {
    Cvss3Severity,
    None,
    Low,
    Medium,
    High,
    Critical,
}
