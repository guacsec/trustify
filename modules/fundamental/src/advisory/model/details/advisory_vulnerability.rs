use sea_orm::{ColumnTrait, EntityTrait, LoaderTrait, QueryFilter};
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;

use trustify_common::db::ConnectionOrTransaction;
use trustify_cvss::cvss3::score::Score;
use trustify_cvss::cvss3::Cvss3Base;
use trustify_entity::{advisory, advisory_vulnerability, cvss3, vulnerability};

use crate::vulnerability::model::VulnerabilityHead;
use crate::Error;

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct AdvisoryVulnerabilityHead {
    #[serde(flatten)]
    pub head: VulnerabilityHead,
    pub non_normative: VulnerabilityHead,
    pub severity: String,
    pub score: f64,
}

impl AdvisoryVulnerabilityHead {
    pub async fn from_entity(
        advisory: &advisory::Model,
        vulnerability: &vulnerability::Model,
        tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Self, Error> {
        let cvss3 = cvss3::Entity::find()
            .filter(cvss3::Column::AdvisoryId.eq(advisory.id))
            .filter(cvss3::Column::VulnerabilityId.eq(vulnerability.id))
            .all(tx)
            .await?;

        let score = if let Some(average) = cvss3
            .iter()
            .map(|e| {
                let base = Cvss3Base::from(e.clone());
                base.score().value()
            })
            .reduce(|accum, e| accum + e)
        {
            Score::new(average / cvss3.len() as f64)
        } else {
            Score::new(0.0)
        };

        let advisory_vuln = advisory_vulnerability::Entity::find()
            .filter(advisory_vulnerability::Column::AdvisoryId.eq(advisory.id))
            .filter(advisory_vulnerability::Column::VulnerabilityId.eq(vulnerability.id))
            .one(tx)
            .await?;

        if let Some(advisory_vuln) = advisory_vuln {
            Ok(AdvisoryVulnerabilityHead {
                head: VulnerabilityHead::from_vulnerability_entity(vulnerability, tx).await?,
                severity: score.severity().to_string(),
                score: score.value(),
                non_normative: VulnerabilityHead::from_advisory_vulnerability_entity(
                    &advisory_vuln,
                    vulnerability,
                    tx,
                )
                .await?,
            })
        } else {
            Err(Error::Data(
                "Missing join between advisory and vulnerability".to_string(),
            ))
        }
    }

    pub async fn from_entities(
        advisory: &advisory::Model,
        vulnerabilities: &[vulnerability::Model],
        tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Vec<Self>, Error> {
        let cvss3s = vulnerabilities
            .load_many(
                cvss3::Entity::find().filter(cvss3::Column::AdvisoryId.eq(advisory.id)),
                tx,
            )
            .await?;

        let mut heads = Vec::new();

        for (vuln, cvss3) in vulnerabilities.iter().zip(cvss3s.iter()) {
            let score = if let Some(average) = cvss3
                .iter()
                .map(|e| {
                    let base = Cvss3Base::from(e.clone());
                    base.score().value()
                })
                .reduce(|accum, e| accum + e)
            {
                Score::new(average / cvss3.len() as f64)
            } else {
                Score::new(0.0)
            };

            let advisory_vuln = advisory_vulnerability::Entity::find()
                .filter(advisory_vulnerability::Column::AdvisoryId.eq(advisory.id))
                .filter(advisory_vulnerability::Column::VulnerabilityId.eq(vuln.id))
                .one(tx)
                .await?;
            if let Some(advisory_vuln) = advisory_vuln {
                heads.push(AdvisoryVulnerabilityHead {
                    head: VulnerabilityHead::from_vulnerability_entity(vuln, tx).await?,
                    severity: score.severity().to_string(),
                    score: score.value(),
                    non_normative: VulnerabilityHead::from_advisory_vulnerability_entity(
                        &advisory_vuln,
                        vuln,
                        tx,
                    )
                    .await?,
                });
            }
        }

        Ok(heads)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct AdvisoryVulnerabilitySummary {
    #[serde(flatten)]
    pub head: AdvisoryVulnerabilityHead,
    #[schema(default, value_type = Vec < String >)]
    pub cvss3_scores: Vec<String>,
}

impl AdvisoryVulnerabilitySummary {
    pub async fn from_entities(
        advisory: &advisory::Model,
        vulnerabilities: &[vulnerability::Model],
        tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Vec<Self>, Error> {
        let mut cvss3s = vulnerabilities
            .load_many(
                cvss3::Entity::find().filter(cvss3::Column::AdvisoryId.eq(advisory.id)),
                tx,
            )
            .await?;

        let mut summaries = Vec::new();

        for (vuln, mut cvss3) in vulnerabilities.iter().zip(cvss3s.drain(..)) {
            let cvss3_scores = cvss3
                .drain(..)
                .map(|e| Cvss3Base::from(e).to_string())
                .collect();

            summaries.push(AdvisoryVulnerabilitySummary {
                head: AdvisoryVulnerabilityHead::from_entity(advisory, vuln, tx).await?,
                cvss3_scores,
            });
        }

        Ok(summaries)
    }
}
