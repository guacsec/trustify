use crate::vulnerability::service::VulnerabilityService;
use test_context::test_context;
use test_log::test;
use trustify_common::db::Transactional;
use trustify_module_ingestor::service::Format;
use trustify_test_context::TrustifyContext;

#[test_context(TrustifyContext)]
#[test(actix_web::test)]
async fn statuses(ctx: &TrustifyContext) -> Result<(), anyhow::Error> {
    let service = VulnerabilityService::new(ctx.db.clone());

    ctx.ingest_documents([
        (Format::OSV, "osv/RUSTSEC-2021-0079.json"),
        (Format::CVE, "cve/CVE-2021-32714.json"),
    ])
    .await?;

    let vuln = service
        .fetch_vulnerability("CVE-2021-32714", Transactional::None)
        .await?;

    assert!(vuln.is_some());

    let vuln = vuln.unwrap();

    assert_eq!(2, vuln.advisories.len());

    let rustsec_advisory = vuln
        .advisories
        .iter()
        .find(|e| e.head.head.identifier == "RUSTSEC-2021-0079");
    assert!(rustsec_advisory.is_some());
    let rustsec_advisory = rustsec_advisory.unwrap();

    let cve_advisory = vuln
        .advisories
        .iter()
        .find(|e| e.head.head.identifier == "CVE-2021-32714");
    assert!(cve_advisory.is_some());
    let cve_advisory = cve_advisory.unwrap();

    let rustsec_statuses: Vec<_> = rustsec_advisory.statuses.keys().collect();

    assert_eq!(2, rustsec_statuses.len());
    assert!(rustsec_statuses.contains(&&"fixed".to_string()));
    assert!(rustsec_statuses.contains(&&"affected".to_string()));

    let cve_statuses: Vec<_> = cve_advisory.statuses.keys().collect();
    assert_eq!(0, cve_statuses.len());

    Ok(())
}
