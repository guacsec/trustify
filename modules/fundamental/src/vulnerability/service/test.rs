use crate::vulnerability::service::VulnerabilityService;
use test_context::test_context;
use test_log::test;
use trustify_common::db::query::{q, Query};
use trustify_common::db::Transactional;
use trustify_common::model::Paginated;
use trustify_test_context::TrustifyContext;

#[test_context(TrustifyContext)]
#[test(actix_web::test)]
async fn all_vulnerabilities(ctx: &TrustifyContext) -> Result<(), anyhow::Error> {
    let service = VulnerabilityService::new(ctx.db.clone());

    ctx.ingest_documents(["osv/RUSTSEC-2021-0079.json", "cve/CVE-2021-32714.json"])
        .await?;

    let vulns = service
        .fetch_vulnerabilities(Query::default(), Paginated::default(), ())
        .await?;

    assert_eq!(1, vulns.items.len());

    assert!(vulns.items[0]
        .head
        .description
        .as_ref()
        .unwrap()
        .starts_with("hyper is an HTTP library for Rust"));

    Ok(())
}

#[test_context(TrustifyContext)]
#[test(actix_web::test)]
async fn statuses(ctx: &TrustifyContext) -> Result<(), anyhow::Error> {
    let service = VulnerabilityService::new(ctx.db.clone());

    ctx.ingest_documents(["osv/RUSTSEC-2021-0079.json", "cve/CVE-2021-32714.json"])
        .await?;

    let vuln = service
        .fetch_vulnerability("CVE-2021-32714", Transactional::None)
        .await?;

    assert!(vuln.is_some());

    let vuln = vuln.unwrap();

    assert_eq!(2, vuln.advisories.len());

    println!("{}", serde_json::to_string_pretty(&vuln)?);

    let rustsec_advisory = vuln
        .advisories
        .iter()
        .find(|e| e.head.head.identifier == "RUSTSEC-2021-0079");
    assert!(rustsec_advisory.is_some());
    let rustsec_advisory = rustsec_advisory.unwrap();

    let cve_advisory = vuln
        .advisories
        .iter()
        .find(|e| e.head.head.identifier == "CVE-2021-32714");
    assert!(cve_advisory.is_some());
    let cve_advisory = cve_advisory.unwrap();

    let rustsec_statuses: Vec<_> = rustsec_advisory.purls.keys().collect();

    assert_eq!(2, rustsec_statuses.len());
    assert!(rustsec_statuses.contains(&&"fixed".to_string()));
    assert!(rustsec_statuses.contains(&&"affected".to_string()));

    let cve_statuses: Vec<_> = cve_advisory.purls.keys().collect();
    assert_eq!(0, cve_statuses.len());

    Ok(())
}

#[test_context(TrustifyContext)]
#[test(actix_web::test)]
async fn statuses_too(ctx: &TrustifyContext) -> Result<(), anyhow::Error> {
    let service = VulnerabilityService::new(ctx.db.clone());

    ctx.ingest_documents([
        "cve/CVE-2024-29025.json",
        "csaf/rhsa-2024-2705.json",
        "spdx/quarkus-bom-3.2.11.Final-redhat-00001.json",
        "spdx/quarkus-bom-3.2.12.Final-redhat-00002.json",
    ])
    .await?;

    let vuln = service
        .fetch_vulnerability("CVE-2024-29025", Transactional::None)
        .await?;

    assert!(vuln.is_some());

    let vuln = vuln.unwrap();

    log::debug!("{}", serde_json::to_string_pretty(&vuln)?);

    assert_eq!(2, vuln.advisories.len());

    Ok(())
}

#[test_context(TrustifyContext)]
#[test(actix_web::test)]
async fn delete_vulnerability(ctx: &TrustifyContext) -> Result<(), anyhow::Error> {
    let service = VulnerabilityService::new(ctx.db.clone());

    ctx.ingest_documents(["cve/CVE-2024-29025.json"]).await?;

    let vuln = service
        .fetch_vulnerability("CVE-2024-29025", ())
        .await?
        .expect("Vulnerability not found");

    assert_eq!(1, vuln.advisories.len());

    let id = &vuln.advisories[0].head.head.identifier;

    let affected = service.delete_vulnerability(id, ()).await?;
    assert_eq!(1, affected);

    assert!(service
        .fetch_vulnerability("CVE-2024-29025", ())
        .await?
        .is_none());

    let affected = service.delete_vulnerability(id, ()).await?;
    assert_eq!(0, affected);

    Ok(())
}

#[test_context(TrustifyContext)]
#[test(actix_web::test)]
async fn vulnerability_queries(ctx: &TrustifyContext) -> Result<(), anyhow::Error> {
    let service = VulnerabilityService::new(ctx.db.clone());

    ctx.ingest_documents([
        "csaf/CVE-2023-20862.json",
        "csaf/RHBA-2024_1440.json",
        "csaf/rhsa-2023_5835.json",
    ])
    .await?;

    let vulns = service
        .fetch_vulnerabilities(q(""), Paginated::default(), ())
        .await?;
    assert_eq!(5, vulns.items.len());
    let vulns = service
        .fetch_vulnerabilities(q("average_score>9"), Paginated::default(), ())
        .await?;
    assert_eq!(1, vulns.items.len());
    assert_eq!(vulns.items[0].head.identifier, "CVE-2023-42282");
    let vulns = service
        .fetch_vulnerabilities(q("average_severity=critical"), Paginated::default(), ())
        .await?;
    assert_eq!(1, vulns.items.len());
    assert_eq!(vulns.items[0].head.identifier, "CVE-2023-42282");
    let vulns = service
        .fetch_vulnerabilities(q("average_severity<high"), Paginated::default(), ())
        .await?;
    assert_eq!(1, vulns.items.len());
    assert_eq!(vulns.items[0].average_severity.as_ref().unwrap(), "medium");
    let vulns = service
        .fetch_vulnerabilities(q("average_severity>=high"), Paginated::default(), ())
        .await?;
    assert_eq!(4, vulns.items.len());
    let vulns = service
        .fetch_vulnerabilities(q("20862"), Paginated::default(), ())
        .await?;
    assert_eq!(1, vulns.items.len());
    assert_eq!(vulns.items[0].head.identifier, "CVE-2023-20862");

    Ok(())
}
