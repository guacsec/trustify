#[cfg(test)]
mod test;

use crate::vulnerability::service::VulnerabilityService;
use actix_web::{get, web, HttpResponse, Responder};
use std::sync::Arc;
use trustify_auth::authenticator::Authenticator;
use trustify_common::db::query::Query;
use trustify_common::db::{Database, Transactional};
use trustify_common::model::Paginated;
use trustify_infrastructure::app::new_auth;
use utoipa::OpenApi;

pub fn configure(config: &mut web::ServiceConfig, db: Database, auth: Option<Arc<Authenticator>>) {
    let service = VulnerabilityService::new(db);
    config.app_data(web::Data::new(service)).service(
        web::scope("/api/v1/vulnerability")
            .wrap(new_auth(auth))
            .service(all)
            .service(get),
    );
}

#[derive(OpenApi)]
#[openapi(
    paths(all, get),
    components(schemas(
        crate::vulnerability::model::VulnerabilityHead,
        crate::vulnerability::model::VulnerabilitySummary,
        crate::vulnerability::model::VulnerabilityDetails,
        crate::vulnerability::model::VulnerabilityAdvisoryHead,
        crate::vulnerability::model::VulnerabilityAdvisorySummary,
        crate::vulnerability::model::PaginatedVulnerabilitySummary,
        trustify_common::advisory::AdvisoryVulnerabilityAssertions,
        trustify_common::advisory::Assertion,
        trustify_common::purl::Purl,
    )),
    tags()
)]
pub struct ApiDoc;

#[utoipa::path(
    tag = "vulnerability",
    context_path = "/api/v1/vulnerability",
    params(
        Query,
        Paginated,
    ),
    responses(
        (status = 200, description = "Matching vulnerabilities", body = PaginatedVulnerabilitySummary),
    ),
)]
#[get("")]
pub async fn all(
    state: web::Data<VulnerabilityService>,
    web::Query(search): web::Query<Query>,
    web::Query(paginated): web::Query<Paginated>,
) -> actix_web::Result<impl Responder> {
    Ok(HttpResponse::Ok().json(
        state
            .fetch_vulnerabilities(search, paginated, Transactional::None)
            .await?,
    ))
}

#[utoipa::path(
    tag = "vulnerability",
    context_path = "/api/v1/vulnerability",
    params(
        ("id", Path, description = "ID of the vulnerability")
    ),
    responses(
        (status = 200, description = "Specified vulnerability", body = VulnerabilityDetails),
        (status = 404, description = "Specified vulnerability not found"),
    ),
)]
#[get("/{id}")]
pub async fn get(
    state: web::Data<VulnerabilityService>,
    id: web::Path<String>,
) -> actix_web::Result<impl Responder> {
    let vuln = state.fetch_vulnerability(&id, Transactional::None).await?;
    if let Some(vuln) = vuln {
        Ok(HttpResponse::Ok().json(vuln))
    } else {
        Ok(HttpResponse::NotFound().finish())
    }
}
