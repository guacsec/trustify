#[cfg(test)]
mod test;

use crate::{
    endpoints::Deprecation,
    vulnerability::{
        model::{VulnerabilityDetails, VulnerabilitySummary},
        service::VulnerabilityService,
    },
    Error::Internal,
};
use actix_web::{delete, get, web, HttpResponse, Responder};
use trustify_common::{
    db::{query::Query, Database, Transactional},
    model::{Paginated, PaginatedResults},
};
use utoipa::OpenApi;

pub const CONTEXT_PATH: &str = "/v1/vulnerability";

pub fn configure(config: &mut utoipa_actix_web::service_config::ServiceConfig, db: Database) {
    let service = VulnerabilityService::new(db);
    config.service(
        utoipa_actix_web::scope(CONTEXT_PATH)
            .app_data(web::Data::new(service))
            .service(all)
            .service(delete)
            .service(get),
    );
}

#[derive(OpenApi)]
#[openapi(paths(all, get, delete), tags())]
pub struct ApiDoc;

#[utoipa::path(
    tag = "vulnerability",
    operation_id = "listVulnerabilities",
    params(
        Query,
        Paginated,
    ),
    responses(
        (status = 200, description = "Matching vulnerabilities", body = PaginatedResults<VulnerabilitySummary>),
    ),
)]
#[get("")]
/// List vulnerabilities
pub async fn all(
    state: web::Data<VulnerabilityService>,
    web::Query(search): web::Query<Query>,
    web::Query(paginated): web::Query<Paginated>,
    web::Query(Deprecation { deprecated }): web::Query<Deprecation>,
) -> actix_web::Result<impl Responder> {
    Ok(HttpResponse::Ok().json(
        state
            .fetch_vulnerabilities(search, paginated, deprecated, Transactional::None)
            .await?,
    ))
}

#[utoipa::path(
    tag = "vulnerability",
    operation_id = "getVulnerability",
    params(
        ("id", Path, description = "ID of the vulnerability")
    ),
    responses(
        (status = 200, description = "Specified vulnerability", body = VulnerabilityDetails),
        (status = 404, description = "Specified vulnerability not found"),
    ),
)]
#[get("/{id}")]
/// Retrieve vulnerability details
pub async fn get(
    state: web::Data<VulnerabilityService>,
    id: web::Path<String>,
    web::Query(Deprecation { deprecated }): web::Query<Deprecation>,
) -> actix_web::Result<impl Responder> {
    let vuln = state
        .fetch_vulnerability(&id, deprecated, Transactional::None)
        .await?;
    if let Some(vuln) = vuln {
        Ok(HttpResponse::Ok().json(vuln))
    } else {
        Ok(HttpResponse::NotFound().finish())
    }
}

#[utoipa::path(
    tag = "vulnerability",
    operation_id = "deleteVulnerability",
    params(
        ("id", Path, description = "ID of the vulnerability")
    ),
    responses(
        (status = 200, description = "Specified vulnerability", body = VulnerabilityDetails),
        (status = 404, description = "Specified vulnerability not found"),
    ),
)]
#[delete("/{id}")]
/// Delete vulnerability
pub async fn delete(
    state: web::Data<VulnerabilityService>,
    id: web::Path<String>,
) -> actix_web::Result<impl Responder> {
    let vuln = state
        // we ignore deprecated advisories, as we delete the vulnerability anyway.
        .fetch_vulnerability(
            &id,
            trustify_module_ingestor::common::Deprecation::Ignore,
            Transactional::None,
        )
        .await?;

    if let Some(vuln) = vuln {
        let rows_affected = state
            .delete_vulnerability(&vuln.head.identifier, ())
            .await?;
        match rows_affected {
            0 => Ok(HttpResponse::NotFound().finish()),
            1 => Ok(HttpResponse::Ok().json(vuln)),
            _ => Err(Internal("Unexpected number of rows affected".into()).into()),
        }
    } else {
        Ok(HttpResponse::NotFound().finish())
    }
}
