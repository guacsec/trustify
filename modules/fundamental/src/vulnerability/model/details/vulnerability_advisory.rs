use crate::advisory::model::AdvisoryHead;
use crate::Error;
use sea_orm::{ColumnTrait, EntityTrait, LoaderTrait, QueryFilter};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use trustify_common::advisory::{AdvisoryVulnerabilityAssertions, Assertion};
use trustify_common::db::ConnectionOrTransaction;
use trustify_common::purl::Purl;
use trustify_cvss::cvss3::score::Score;
use trustify_cvss::cvss3::Cvss3Base;
use trustify_entity::{
    advisory, affected_package_version_range, cvss3, fixed_package_version,
    not_affected_package_version, package, package_version, package_version_range, vulnerability,
};
use utoipa::ToSchema;

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct VulnerabilityAdvisoryHead {
    #[serde(flatten)]
    pub head: AdvisoryHead,
    pub severity: Option<String>,
    pub score: Option<f64>,
}

impl VulnerabilityAdvisoryHead {
    pub async fn from_entity(
        vulnerability: &vulnerability::Model,
        advisory: &advisory::Model,
        tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Self, Error> {
        let cvss3 = cvss3::Entity::find()
            .filter(cvss3::Column::AdvisoryId.eq(advisory.id))
            .filter(cvss3::Column::VulnerabilityId.eq(vulnerability.id))
            .all(tx)
            .await?;

        let total_score = cvss3
            .iter()
            .map(|e| {
                let base = Cvss3Base::from(e.clone());
                base.score().value()
            })
            .reduce(|accum, e| accum + e);

        let score = total_score.map(|score| Score::new(score / cvss3.len() as f64));

        Ok(VulnerabilityAdvisoryHead {
            head: AdvisoryHead::from_entity(advisory, None, tx).await?,
            severity: score.map(|score| score.severity().to_string()),
            score: score.map(|score| score.value()),
        })
    }
    pub async fn from_entities(
        vulnerability: &vulnerability::Model,
        advisories: &[advisory::Model],
        tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Vec<Self>, Error> {
        let cvss3s = advisories
            .load_many(
                cvss3::Entity::find().filter(cvss3::Column::VulnerabilityId.eq(vulnerability.id)),
                tx,
            )
            .await?;

        let mut heads = Vec::new();

        for (advisory, cvss3) in advisories.iter().zip(cvss3s.iter()) {
            let total_score = cvss3
                .iter()
                .map(|e| {
                    let base = Cvss3Base::from(e.clone());
                    base.score().value()
                })
                .reduce(|accum, e| accum + e);

            let score = total_score.map(|score| Score::new(score / cvss3.len() as f64));

            heads.push(VulnerabilityAdvisoryHead {
                head: AdvisoryHead::from_entity(advisory, None, tx).await?,
                severity: score.map(|score| score.severity().to_string()),
                score: score.map(|score| score.value()),
            });
        }

        Ok(heads)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct VulnerabilityAdvisorySummary {
    #[serde(flatten)]
    pub head: VulnerabilityAdvisoryHead,
    #[schema(default, value_type = Vec < String >)]
    pub cvss3_scores: Vec<String>,
    #[serde(flatten)]
    pub assertions: AdvisoryVulnerabilityAssertions,
}

impl VulnerabilityAdvisorySummary {
    pub async fn from_entities(
        vulnerability: &vulnerability::Model,
        advisories: &[advisory::Model],
        tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Vec<Self>, Error> {
        let mut summaries = Vec::new();

        let mut fixed = advisories
            .load_many(
                fixed_package_version::Entity::find()
                    .filter(fixed_package_version::Column::VulnerabilityId.eq(vulnerability.id)),
                tx,
            )
            .await?;

        let mut affected = advisories
            .load_many(
                affected_package_version_range::Entity::find().filter(
                    affected_package_version_range::Column::VulnerabilityId.eq(vulnerability.id),
                ),
                tx,
            )
            .await?;

        let mut not_affected = advisories
            .load_many(
                not_affected_package_version::Entity::find().filter(
                    not_affected_package_version::Column::VulnerabilityId.eq(vulnerability.id),
                ),
                tx,
            )
            .await?;

        let mut cvss3s = advisories
            .load_many(
                cvss3::Entity::find().filter(cvss3::Column::VulnerabilityId.eq(vulnerability.id)),
                tx,
            )
            .await?;

        for ((((advisory, fixed), affected), not_affected), mut cvss3) in advisories
            .iter()
            .zip(fixed.drain(..))
            .zip(affected.drain(..))
            .zip(not_affected.drain(..))
            .zip(cvss3s.drain(..))
        {
            let mut assertions = HashMap::new();

            // fixed
            {
                let mut package_versions = fixed
                    .load_one(package_version::Entity, tx)
                    .await?
                    .iter()
                    .flat_map(|e| e.clone())
                    .collect::<Vec<_>>();

                let mut packages = package_versions.load_one(package::Entity, tx).await?;

                packages.drain(..).zip(package_versions.drain(..)).for_each(
                    |(package, version)| {
                        if let Some(package) = package {
                            let package_assertions = assertions
                                .entry(
                                    Purl {
                                        ty: package.r#type,
                                        namespace: package.namespace,
                                        name: package.name,
                                        version: None,
                                        qualifiers: Default::default(),
                                    }
                                    .to_string(),
                                )
                                .or_insert(vec![]);

                            package_assertions.push(Assertion::Fixed {
                                version: version.version,
                            })
                        }
                    },
                );
            }

            // affected
            {
                let mut package_version_ranges = affected
                    .load_one(package_version_range::Entity, tx)
                    .await?
                    .iter()
                    .flat_map(|e| e.clone())
                    .collect::<Vec<_>>();

                let mut packages = package_version_ranges
                    .load_one(package::Entity, tx)
                    .await?
                    .drain(..)
                    .collect::<Vec<_>>();

                packages
                    .drain(..)
                    .zip(package_version_ranges.drain(..))
                    .for_each(|(package, version_range)| {
                        if let Some(package) = package {
                            let package_assertions = assertions
                                .entry(
                                    Purl {
                                        ty: package.r#type,
                                        namespace: package.namespace,
                                        name: package.name,
                                        version: None,
                                        qualifiers: Default::default(),
                                    }
                                    .to_string(),
                                )
                                .or_insert(vec![]);

                            package_assertions.push(Assertion::Affected {
                                start_version: version_range.start,
                                end_version: version_range.end,
                            })
                        }
                    });
            }

            // not affected
            {
                let mut package_versions = not_affected
                    .load_one(package_version::Entity, tx)
                    .await?
                    .iter()
                    .flat_map(|e| e.clone())
                    .collect::<Vec<_>>();

                let mut packages = package_versions
                    .load_one(package::Entity, tx)
                    .await?
                    .drain(..)
                    .collect::<Vec<_>>();

                packages.drain(..).zip(package_versions.drain(..)).for_each(
                    |(package, version)| {
                        if let Some(package) = package {
                            let package_assertions = assertions
                                .entry(
                                    Purl {
                                        ty: package.r#type,
                                        namespace: package.namespace,
                                        name: package.name,
                                        version: None,
                                        qualifiers: Default::default(),
                                    }
                                    .to_string(),
                                )
                                .or_insert(vec![]);

                            package_assertions.push(Assertion::NotAffected {
                                version: version.version,
                            })
                        }
                    },
                );

                let cvss3_scores = cvss3
                    .drain(..)
                    .map(|e| Cvss3Base::from(e).to_string())
                    .collect();

                summaries.push(VulnerabilityAdvisorySummary {
                    head: VulnerabilityAdvisoryHead::from_entity(vulnerability, advisory, tx)
                        .await?,
                    cvss3_scores,
                    assertions: AdvisoryVulnerabilityAssertions { assertions },
                });
            }
        }

        Ok(summaries)
    }
}
