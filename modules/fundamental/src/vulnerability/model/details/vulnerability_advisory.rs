use crate::advisory::model::AdvisoryHead;
use crate::Error;
use sea_orm::{ColumnTrait, EntityTrait, LoaderTrait, QueryFilter};
use serde::{Deserialize, Serialize};
use trustify_common::db::ConnectionOrTransaction;
use trustify_cvss::cvss3::score::Score;
use trustify_cvss::cvss3::Cvss3Base;
use trustify_entity::{advisory, cvss3, vulnerability};
use utoipa::ToSchema;

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct VulnerabilityAdvisoryHead {
    #[serde(flatten)]
    pub head: AdvisoryHead,
    pub severity: Option<String>,
    pub score: Option<f64>,
}

impl VulnerabilityAdvisoryHead {
    pub async fn from_entity(
        vulnerability: &vulnerability::Model,
        advisory: &advisory::Model,
        tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Self, Error> {
        let cvss3 = cvss3::Entity::find()
            .filter(cvss3::Column::AdvisoryId.eq(advisory.id))
            .filter(cvss3::Column::VulnerabilityId.eq(vulnerability.id))
            .all(tx)
            .await?;

        let total_score = cvss3
            .iter()
            .map(|e| {
                let base = Cvss3Base::from(e.clone());
                base.score().value()
            })
            .reduce(|accum, e| accum + e);

        let score = total_score.map(|score| Score::new(score / cvss3.len() as f64));

        Ok(VulnerabilityAdvisoryHead {
            head: AdvisoryHead::from_entity(advisory, None, tx).await?,
            severity: score.map(|score| score.severity().to_string()),
            score: score.map(|score| score.value()),
        })
    }
    pub async fn from_entities(
        vulnerability: &vulnerability::Model,
        advisories: &[advisory::Model],
        tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Vec<Self>, Error> {
        let cvss3s = advisories
            .load_many(
                cvss3::Entity::find().filter(cvss3::Column::VulnerabilityId.eq(vulnerability.id)),
                tx,
            )
            .await?;

        let mut heads = Vec::new();

        for (advisory, cvss3) in advisories.iter().zip(cvss3s.iter()) {
            let total_score = cvss3
                .iter()
                .map(|e| {
                    let base = Cvss3Base::from(e.clone());
                    base.score().value()
                })
                .reduce(|accum, e| accum + e);

            let score = total_score.map(|score| Score::new(score / cvss3.len() as f64));

            heads.push(VulnerabilityAdvisoryHead {
                head: AdvisoryHead::from_entity(advisory, None, tx).await?,
                severity: score.map(|score| score.severity().to_string()),
                score: score.map(|score| score.value()),
            });
        }

        Ok(heads)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct VulnerabilityAdvisorySummary {
    #[serde(flatten)]
    pub head: VulnerabilityAdvisoryHead,
    #[schema(default, value_type = Vec < String >)]
    pub cvss3_scores: Vec<String>,
}

impl VulnerabilityAdvisorySummary {
    pub async fn from_entities(
        vulnerability: &vulnerability::Model,
        advisories: &[advisory::Model],
        tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Vec<Self>, Error> {
        let mut summaries = Vec::new();

        let mut cvss3s = advisories
            .load_many(
                cvss3::Entity::find().filter(cvss3::Column::VulnerabilityId.eq(vulnerability.id)),
                tx,
            )
            .await?;

        for (advisory, mut cvss3) in advisories.iter().zip(cvss3s.drain(..)) {
            let cvss3_scores = cvss3
                .drain(..)
                .map(|e| Cvss3Base::from(e).to_string())
                .collect();

            summaries.push(VulnerabilityAdvisorySummary {
                head: VulnerabilityAdvisoryHead::from_entity(vulnerability, advisory, tx).await?,
                cvss3_scores,
            });
        }

        Ok(summaries)
    }
}
