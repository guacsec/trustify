mod vulnerability_advisory;

pub use vulnerability_advisory::*;

use crate::{vulnerability::model::VulnerabilityHead, Error};
use sea_orm::{ColumnTrait, EntityTrait, ModelTrait, QueryFilter};
use serde::{Deserialize, Serialize};
use trustify_common::{db::ConnectionOrTransaction, memo::Memo};
use trustify_cvss::cvss3::{score::Score, severity::Severity, Cvss3Base};
use trustify_entity::{advisory_vulnerability, cvss3, vulnerability};
use trustify_module_ingestor::common::{Deprecation, DeprecationForExt};
use utoipa::ToSchema;

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct VulnerabilityDetails {
    #[serde(flatten)]
    pub head: VulnerabilityHead,

    /// Average (arithmetic mean) severity of the vulnerability aggregated from *all* related advisories.
    #[schema(required)]
    pub average_severity: Option<Severity>,

    /// Average (arithmetic mean) score of the vulnerability aggregated from *all* related advisories.
    #[schema(required)]
    pub average_score: Option<f64>,

    /// Advisories addressing this vulnerability, if any.
    pub advisories: Vec<VulnerabilityAdvisorySummary>,
}

impl VulnerabilityDetails {
    pub async fn from_entity(
        vulnerability: &vulnerability::Model,
        deprecation: Deprecation,
        tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Self, Error> {
        let advisory_vulnerabilities = vulnerability
            .find_related(advisory_vulnerability::Entity)
            .with_deprecation_related(deprecation)
            .all(tx)
            .await?;

        let (score, cvss3) = Self::average_score(vulnerability, tx).await?;

        let advisories = VulnerabilityAdvisorySummary::from_entities(
            vulnerability,
            &advisory_vulnerabilities,
            &cvss3,
            tx,
        )
        .await?;

        Ok(VulnerabilityDetails {
            head: VulnerabilityHead::from_vulnerability_entity(
                vulnerability,
                Memo::NotProvided,
                tx,
            )
            .await?,
            average_severity: score.map(|v| v.severity()),
            average_score: score.map(|v| v.value()),
            advisories,
        })
    }

    pub async fn average_score(
        vulnerability: &vulnerability::Model,
        tx: &ConnectionOrTransaction<'_>,
    ) -> Result<(Option<Score>, Vec<cvss3::Model>), Error> {
        let cvss3 = cvss3::Entity::find()
            .filter(cvss3::Column::VulnerabilityId.eq(&vulnerability.id))
            .all(tx)
            .await?;

        let total = cvss3
            .iter()
            .map(|e| {
                let base = Cvss3Base::from(e.clone());
                base.score().value()
            })
            .reduce(|accum, e| accum + e);

        let average = total.map(|t| Score::new(t / cvss3.len() as f64));

        Ok((average, cvss3))
    }
}
