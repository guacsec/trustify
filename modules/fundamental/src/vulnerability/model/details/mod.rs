mod vulnerability_advisory;
pub use vulnerability_advisory::*;

use crate::vulnerability::model::VulnerabilityHead;
use crate::Error;
use sea_orm::{ColumnTrait, EntityTrait, LoaderTrait, ModelTrait, QueryFilter};
use serde::{Deserialize, Serialize};
use trustify_common::db::ConnectionOrTransaction;
use trustify_cvss::cvss3::score::Score;
use trustify_cvss::cvss3::Cvss3Base;
use trustify_entity::{advisory_vulnerability, cvss3, vulnerability};
use utoipa::ToSchema;

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct VulnerabilityDetails {
    #[serde(flatten)]
    pub head: VulnerabilityHead,
    /// Average (arithmetic mean) severity of the vulnerability aggregated from *all* related advisories.
    pub average_severity: Option<String>,
    /// Average (arithmetic mean) score of the vulnerability aggregated from *all* related advisories.
    pub average_score: Option<f64>,
    pub advisories: Vec<VulnerabilityAdvisorySummary>,
}

impl VulnerabilityDetails {
    pub async fn from_advisory_vulnerabilities(
        vulnerability_identifier: &str,
        advisory_vulnerabilities: &[advisory_vulnerability::Model],
        tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Self, Error> {
        let advisories = VulnerabilityAdvisorySummary::from_entities(
            vulnerability_identifier,
            advisory_vulnerabilities,
            tx,
        )
        .await?;

        let cvss3 = trustify_entity::cvss3::Entity::find()
            .filter(trustify_entity::cvss3::Column::VulnerabilityId.eq(vulnerability_identifier))
            .all(tx)
            .await?;

        let total_score = cvss3
            .iter()
            .map(|e| {
                let base = Cvss3Base::from(e.clone());
                base.score().value()
            })
            .reduce(|accum, e| accum + e);

        let average_score = total_score.map(|total| Score::new(total / cvss3.len() as f64));

        Ok(VulnerabilityDetails {
            head: VulnerabilityHead {
                non_normative: false,
                identifier: vulnerability_identifier.to_string(),
                title: None,
                published: None,
                modified: None,
                withdrawn: None,
                discovered: None,
                released: None,
                cwe: None,
            },
            average_severity: average_score.map(|score| score.severity().to_string()),
            average_score: average_score.map(|score| score.value()),
            advisories,
        })
    }

    pub async fn from_entity(
        vulnerability: &vulnerability::Model,
        tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Self, Error> {
        let advisory_vulnerabilities = vulnerability
            .find_related(advisory_vulnerability::Entity)
            .all(tx)
            .await?;

        let advisories = VulnerabilityAdvisorySummary::from_entities(
            &vulnerability.id,
            &advisory_vulnerabilities,
            tx,
        )
        .await?;

        let cvss3 = cvss3::Entity::find()
            .filter(cvss3::Column::VulnerabilityId.eq(&vulnerability.id))
            .all(tx)
            .await?;

        let total_score = cvss3
            .iter()
            .map(|e| {
                let base = Cvss3Base::from(e.clone());
                base.score().value()
            })
            .reduce(|accum, e| accum + e);

        let average_score = total_score.map(|total| Score::new(total / cvss3.len() as f64));

        Ok(VulnerabilityDetails {
            head: VulnerabilityHead::from_vulnerability_entity(vulnerability),
            average_severity: average_score.map(|score| score.severity().to_string()),
            average_score: average_score.map(|score| score.value()),
            advisories,
        })
    }

    pub async fn from_entities(
        vulnerabilities: &[vulnerability::Model],
        tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Vec<Self>, Error> {
        let advisory_vulnerabilities = vulnerabilities
            .load_many(advisory_vulnerability::Entity::find(), tx)
            .await?;

        let mut details = Vec::new();

        for (vulnerability, advisory_vulnerabilities) in
            vulnerabilities.iter().zip(advisory_vulnerabilities.iter())
        {
            let cvss3 = cvss3::Entity::find()
                .filter(cvss3::Column::VulnerabilityId.eq(&vulnerability.id))
                .all(tx)
                .await?;

            let total_score = cvss3
                .iter()
                .map(|e| {
                    let base = Cvss3Base::from(e.clone());
                    base.score().value()
                })
                .reduce(|accum, e| accum + e);

            let average_score = total_score.map(|total| Score::new(total / cvss3.len() as f64));

            details.push(VulnerabilityDetails {
                head: VulnerabilityHead::from_vulnerability_entity(vulnerability),
                average_severity: average_score.map(|score| score.severity().to_string()),
                average_score: average_score.map(|score| score.value()),
                advisories: VulnerabilityAdvisorySummary::from_entities(
                    &vulnerability.id,
                    advisory_vulnerabilities,
                    tx,
                )
                .await?,
            })
        }

        Ok(details)
    }
}
