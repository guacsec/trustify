mod details;
mod summary;

pub use details::*;
pub use summary::*;

use crate::Error;
use serde::{Deserialize, Serialize};
use time::OffsetDateTime;
use trustify_entity::{advisory_vulnerability, vulnerability};
use utoipa::ToSchema;

fn is_false(val: &bool) -> bool {
    !(*val)
}

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct VulnerabilityHead {
    #[serde(default, skip_serializing_if = "is_false")]
    pub non_normative: bool,
    pub identifier: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub published: Option<OffsetDateTime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub modified: Option<OffsetDateTime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub withdrawn: Option<OffsetDateTime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub discovered: Option<OffsetDateTime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub released: Option<OffsetDateTime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cwe: Option<String>,
}

impl VulnerabilityHead {
    pub fn from_vulnerability_entity(entity: &vulnerability::Model) -> Self {
        Self {
            non_normative: false,
            identifier: entity.id.clone(),
            title: entity.title.clone(),
            published: entity.published,
            modified: entity.modified,
            withdrawn: entity.withdrawn,
            discovered: None,
            released: None,
            cwe: entity.cwe.clone(),
        }
    }

    pub fn from_advisory_vulnerability_entity(
        advisory_vulnerability: &advisory_vulnerability::Model,
        vuln: &vulnerability::Model,
    ) -> Self {
        Self {
            non_normative: true,
            identifier: vuln.id.clone(),
            title: advisory_vulnerability.title.clone(),
            published: None,
            modified: None,
            withdrawn: None,
            discovered: advisory_vulnerability.discovery_date,
            released: advisory_vulnerability.release_date,
            cwe: advisory_vulnerability.cwe.clone(),
        }
    }

    pub async fn from_vulnerability_entities(
        entities: &[vulnerability::Model],
    ) -> Result<Vec<Self>, Error> {
        Ok(entities
            .iter()
            .map(Self::from_vulnerability_entity)
            .collect())
    }
}
