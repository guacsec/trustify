mod details;
mod summary;

pub use details::*;
use sea_orm::{ColumnTrait, LoaderTrait, ModelTrait, QueryFilter};
pub use summary::*;

use crate::Error;
use serde::{Deserialize, Serialize};
use time::OffsetDateTime;
use trustify_common::db::ConnectionOrTransaction;
use trustify_common::memo::Memo;
use trustify_entity::{advisory_vulnerability, vulnerability, vulnerability_description};
use utoipa::ToSchema;

fn is_false(val: &bool) -> bool {
    !(*val)
}

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct VulnerabilityHead {
    #[serde(default, skip_serializing_if = "is_false")]
    pub normative: bool,

    /// The globally-unique identifier for the vulnerability.
    /// Traditionally (but not required) refers to the assigned
    /// CVE identifier.
    pub identifier: String,

    /// The title of the vulnerability, if known.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,

    /// The description of the vulnerability, if known.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    /// The date (in RFC3339 format) of when the vulnerability was published, if any.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub published: Option<OffsetDateTime>,

    /// The date (in RFC3339 format) of when the vulnerability was last modified, if any.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub modified: Option<OffsetDateTime>,

    /// The date (in RFC3339 format) of when the vulnerability was last withdrawn, if any.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub withdrawn: Option<OffsetDateTime>,

    /// The date (in RFC3339 format) of when the vulnerability was discovered, if any.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub discovered: Option<OffsetDateTime>,

    /// The date (in RFC3339 format) of when software containing the vulnerability first released, if known.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub released: Option<OffsetDateTime>,

    // TODO: this should probably be an array
    /// Associated CWE, if any.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cwe: Option<String>,
}

impl VulnerabilityHead {
    pub async fn from_vulnerability_entity(
        entity: &vulnerability::Model,
        description: Memo<vulnerability_description::Model>,
        tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Self, Error> {
        let description = match description {
            Memo::Provided(inner) => inner.map(|inner| inner.description),
            Memo::NotProvided => entity
                .find_related(vulnerability_description::Entity)
                .filter(vulnerability_description::Column::Lang.eq("en"))
                .one(tx)
                .await?
                .map(|inner| inner.description),
        };

        Ok(Self::from_vulnerability_entity_and_description(
            entity,
            description,
        ))
    }

    pub fn from_vulnerability_entity_and_description(
        entity: &vulnerability::Model,
        description: Option<String>,
    ) -> Self {
        Self {
            normative: true,
            identifier: entity.id.clone(),
            title: entity.title.clone(),
            description,
            published: entity.published,
            modified: entity.modified,
            withdrawn: entity.withdrawn,
            discovered: None,
            released: None,
            cwe: entity.cwe.clone(),
        }
    }

    pub fn from_advisory_vulnerability_entity(
        advisory_vulnerability: &advisory_vulnerability::Model,
        vuln: &vulnerability::Model,
    ) -> Self {
        Self {
            normative: false,
            identifier: vuln.id.clone(),
            title: advisory_vulnerability.title.clone(),
            description: advisory_vulnerability.description.clone(),
            published: None,
            modified: None,
            withdrawn: None,
            discovered: advisory_vulnerability.discovery_date,
            released: advisory_vulnerability.release_date,
            cwe: advisory_vulnerability.cwe.clone(),
        }
    }

    pub async fn from_vulnerability_entities(
        entities: &[vulnerability::Model],
        tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Vec<Self>, Error> {
        let descriptions = entities
            .load_many(vulnerability_description::Entity, tx)
            .await?
            .into_iter()
            .map(|model| {
                model
                    .into_iter()
                    .filter(|desc| desc.lang == "en")
                    .map(|desc| desc.description)
                    .next()
            });

        Ok(entities
            .iter()
            .zip(descriptions)
            .map(|(vuln, desc)| Self::from_vulnerability_entity_and_description(vuln, desc))
            .collect())
    }
}
