use serde::{Deserialize, Serialize};
use time::OffsetDateTime;
use utoipa::ToSchema;

pub use details::*;
pub use summary::*;
use trustify_common::db::ConnectionOrTransaction;
use trustify_entity::{advisory_vulnerability, vulnerability};

use crate::Error;

mod details;
mod summary;

fn is_false(val: &bool) -> bool {
    !(*val)
}

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct VulnerabilityHead {
    #[serde(default, skip_serializing_if = "is_false")]
    pub non_normative: bool,
    pub identifier: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub published: Option<OffsetDateTime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub modified: Option<OffsetDateTime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub withdrawn: Option<OffsetDateTime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub discovered: Option<OffsetDateTime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub released: Option<OffsetDateTime>,
}

impl VulnerabilityHead {
    pub async fn from_vulnerability_entity(
        entity: &vulnerability::Model,
        _tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Self, Error> {
        Ok(Self {
            non_normative: false,
            identifier: entity.identifier.clone(),
            title: entity.title.clone(),
            published: entity.published,
            modified: entity.modified,
            withdrawn: entity.withdrawn,
            discovered: None,
            released: None,
        })
    }

    pub async fn from_advisory_vulnerability_entity(
        advisory_vulnerability: &advisory_vulnerability::Model,
        vuln: &vulnerability::Model,
        _tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Self, Error> {
        Ok(Self {
            non_normative: true,
            identifier: vuln.identifier.clone(),
            title: advisory_vulnerability.title.clone(),
            published: None,
            modified: None,
            withdrawn: None,
            discovered: advisory_vulnerability.discovery_date,
            released: advisory_vulnerability.release_date,
        })
    }

    pub async fn from_vulnerability_entities(
        entities: &[vulnerability::Model],
        _tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Vec<Self>, Error> {
        Ok(entities
            .iter()
            .map(|vuln| Self {
                non_normative: false,
                identifier: vuln.identifier.clone(),
                title: vuln.title.clone(),
                published: vuln.published,
                modified: vuln.modified,
                withdrawn: vuln.withdrawn,
                discovered: None,
                released: None,
            })
            .collect())
    }
}
