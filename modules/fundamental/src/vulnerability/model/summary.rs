use crate::{
    vulnerability::model::{VulnerabilityAdvisoryHead, VulnerabilityHead},
    Error,
};
use sea_orm::{ColumnTrait, EntityTrait, LoaderTrait, QueryFilter};
use serde::{Deserialize, Serialize};
use trustify_common::{db::ConnectionOrTransaction, paginated};
use trustify_entity::cvss3::Severity;
use trustify_entity::{
    advisory, advisory_vulnerability, cvss3, vulnerability, vulnerability_description,
};
use utoipa::ToSchema;

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct VulnerabilitySummary {
    #[serde(flatten)]
    pub head: VulnerabilityHead,

    /// Average (arithmetic mean) severity of the vulnerability aggregated from *all* related advisories.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub average_severity: Option<String>,

    /// Average (arithmetic mean) score of the vulnerability aggregated from *all* related advisories.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub average_score: Option<f64>,

    // All advisories related to this vulnerability
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub advisories: Vec<VulnerabilityAdvisoryHead>,
}

paginated!(VulnerabilitySummary);

impl VulnerabilitySummary {
    pub async fn from_entities(
        vulnerabilities: &[vulnerability::Model],
        averages: &[(Option<f64>, Option<Severity>)],
        tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Vec<Self>, Error> {
        let advisories = vulnerabilities
            .load_many_to_many(advisory::Entity::find(), advisory_vulnerability::Entity, tx)
            .await?;

        let vuln_cvss3s = vulnerabilities.load_many(cvss3::Entity, tx).await?;

        let descriptions = vulnerabilities
            .load_many(
                vulnerability_description::Entity::find()
                    .filter(vulnerability_description::Column::Lang.eq("en")),
                tx,
            )
            .await?;

        let mut summaries = Vec::new();

        for ((((vuln, advisories), (average_score, average_severity)), vuln_cvss3s), description) in
            vulnerabilities
                .iter()
                .zip(advisories.iter())
                .zip(averages.iter())
                .zip(vuln_cvss3s.iter())
                .zip(descriptions.iter())
        {
            summaries.push(VulnerabilitySummary {
                head: VulnerabilityHead::from_vulnerability_entity(
                    vuln,
                    Some(description.first().cloned()),
                    tx,
                )
                .await?,
                average_severity: average_severity.map(|e| e.to_string()),
                average_score: *average_score,
                advisories: VulnerabilityAdvisoryHead::from_entities(
                    vuln,
                    advisories,
                    vuln_cvss3s,
                    tx,
                )
                .await?,
            });
        }

        Ok(summaries)
    }
}
