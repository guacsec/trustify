use crate::vulnerability::model::{VulnerabilityAdvisoryHead, VulnerabilityHead};
use crate::Error;
use sea_orm::{ColumnTrait, EntityTrait, LoaderTrait, QueryFilter};
use serde::{Deserialize, Serialize};
use trustify_common::db::ConnectionOrTransaction;
use trustify_common::paginated;
use trustify_cvss::cvss3::score::Score;
use trustify_cvss::cvss3::Cvss3Base;
use trustify_entity::{advisory, advisory_vulnerability, cvss3, vulnerability};
use utoipa::ToSchema;

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct VulnerabilitySummary {
    #[serde(flatten)]
    pub head: VulnerabilityHead,
    /// Average (arithmetic mean) severity of the vulnerability aggregated from *all* related advisories.
    pub average_severity: Option<String>,
    /// Average (arithmetic mean) score of the vulnerability aggregated from *all* related advisories.
    pub average_score: Option<f64>,
    // All advisories related to this vulnerability
    #[serde(default)]
    pub advisories: Vec<VulnerabilityAdvisoryHead>,
}

paginated!(VulnerabilitySummary);

impl VulnerabilitySummary {
    pub async fn from_entities(
        vulnerabilities: &[vulnerability::Model],
        tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Vec<Self>, Error> {
        let advisories = vulnerabilities
            .load_many_to_many(advisory::Entity::find(), advisory_vulnerability::Entity, tx)
            .await?;

        let mut summaries = Vec::new();

        for (vuln, advisories) in vulnerabilities.iter().zip(advisories.iter()) {
            let cvss3 = cvss3::Entity::find()
                .filter(cvss3::Column::VulnerabilityId.eq(vuln.id))
                .all(tx)
                .await?;

            let total_score = cvss3
                .iter()
                .map(|e| {
                    let base = Cvss3Base::from(e.clone());
                    base.score().value()
                })
                .reduce(|accum, e| accum + e);

            let average_score = total_score.map(|total| Score::new(total / cvss3.len() as f64));

            summaries.push(VulnerabilitySummary {
                head: VulnerabilityHead::from_vulnerability_entity(vuln, tx).await?,
                average_severity: average_score.map(|score| score.severity().to_string()),
                average_score: average_score.map(|score| score.value()),
                advisories: VulnerabilityAdvisoryHead::from_entities(vuln, advisories, tx).await?,
            });
        }

        Ok(summaries)
    }
}
