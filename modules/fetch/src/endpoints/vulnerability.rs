use crate::endpoints::Error;
use crate::model::vulnerability::VulnerabilitySummary;
use crate::query::SearchOptions;
use crate::service::FetchService;
use actix_web::{get, web, HttpResponse, Responder};
use trustify_common::db::Transactional;
use trustify_common::model::{Paginated, PaginatedResults};
use trustify_entity::vulnerability::Model;

#[utoipa::path(
    context_path = "/api/v1/vulnerability",
    tag = "vulnerability",
    params(
        SearchOptions,
        Paginated,
    ),
    responses(
        (status = 200, description = "Matching vulnerabilities", body = PaginatedVulnerabilitySummary),
    ),
)]
#[get("")]
pub async fn all(
    state: web::Data<FetchService>,
    web::Query(search): web::Query<SearchOptions>,
    web::Query(paginated): web::Query<Paginated>,
) -> actix_web::Result<impl Responder> {
    Ok(HttpResponse::Ok().json(
        state
            .fetch_vulnerabilities(search, paginated, Transactional::None)
            .await?,
    ))
}

#[utoipa::path(
    context_path = "/api/v1/vulnerability",
    tag = "vulnerability",
    params(
        ("id", Path, description = "ID of the vulnerability")
    ),
    responses(
        (status = 200, description = "Specified vulnerability", body = VulnerabilityDetails),
        (status = 404, description = "Specified vulnerability not found"),
    ),
)]
#[get("/{id}")]
pub async fn get(
    state: web::Data<FetchService>,
    id: web::Path<String>,
) -> actix_web::Result<impl Responder> {
    let vuln = state.fetch_vulnerability(&id, Transactional::None).await?;
    if let Some(vuln) = vuln {
        Ok(HttpResponse::Ok().json(vuln))
    } else {
        Ok(HttpResponse::NotFound().finish())
    }
}

#[utoipa::path(
    context_path = "/api/v1/vulnerability",
    tag = "vulnerability",
    params(
        ("id", Path, description = "ID of the vulnerability")
    ),
    responses(
        (status = 200, description = "Affected products"),
    ),
)]
#[get("/{id}/affected/products")]
pub async fn affected_products(
    //state: web::Data<Graph>,
    id: web::Path<String>,
) -> actix_web::Result<impl Responder> {
    Ok(HttpResponse::Ok().finish())
}

/*
#[cfg(test)]
mod tests {
    use actix_web::test::TestRequest;
    use actix_web::web::Data;
    use actix_web::{web, App};
    use std::sync::Arc;
    use trustify_common::db::Database;
    use trustify_common::model::PaginatedResults;
    use trustify_entity::vulnerability;

    use crate::model::vulnerability::Vulnerability;
    use test_log::test;

    #[test(actix_web::test)]
    async fn all_vulnerabilities() -> Result<(), anyhow::Error> {
        let db = Database::for_test("api_all_vulnerabilities").await?;
        let graph = Arc::new(Graph::new(db));

        let vuln = graph.ingest_vulnerability("CVE-111", ()).await?;

        vuln.set_title(Some("Bob's CVE".to_string()), ()).await?;

        let vuln = graph.ingest_vulnerability("CVE-222", ()).await?;

        vuln.set_title(Some("Jim's CVE".to_string()), ()).await?;

        let vuln = graph.ingest_vulnerability("CVE-333", ()).await?;

        vuln.set_title(Some("Jenß CVE".to_string()), ()).await?;

        let app = actix_web::test::init_service(
            App::new()
                .app_data(web::Data::from(graph.clone()))
                .configure(crate::endpoints::configure),
        )
        .await;

        let uri = "/api/v1/vulnerability";

        let request = TestRequest::get().uri(uri).to_request();

        let response: PaginatedResults<Vulnerability> =
            actix_web::test::call_and_read_body_json(&app, request).await;

        assert_eq!(3, response.items.len());

        Ok(())
    }

    #[test(actix_web::test)]
    async fn all_vulnerabilities_paginated() -> Result<(), anyhow::Error> {
        let db = Database::for_test("api_all_vulnerabilities_paginated").await?;
        let graph = Arc::new(Graph::new(db));

        let vuln = graph.ingest_vulnerability("CVE-111", ()).await?;

        vuln.set_title(Some("Bob's CVE".to_string()), ()).await?;

        let vuln = graph.ingest_vulnerability("CVE-222", ()).await?;

        vuln.set_title(Some("Jim's CVE".to_string()), ()).await?;

        let vuln = graph.ingest_vulnerability("CVE-333", ()).await?;

        vuln.set_title(Some("Jenß CVE".to_string()), ()).await?;

        let app = actix_web::test::init_service(
            App::new()
                .app_data(web::Data::from(graph.clone()))
                .configure(crate::endpoints::configure),
        )
        .await;

        let uri = "/api/v1/vulnerability?limit=2";

        let request = TestRequest::get().uri(uri).to_request();

        let response: PaginatedResults<Vulnerability> =
            actix_web::test::call_and_read_body_json(&app, request).await;

        assert_eq!(2, response.items.len());

        Ok(())
    }

    #[test(actix_web::test)]
    async fn all_vulnerabilities_filtered() -> Result<(), anyhow::Error> {
        let db = Database::for_test("api_all_vulnerabilities_filtered").await?;
        let graph = Arc::new(Graph::new(db));

        let vuln = graph.ingest_vulnerability("CVE-111", ()).await?;

        vuln.set_title(Some("Bob's CVE".to_string()), ()).await?;

        let vuln = graph.ingest_vulnerability("CVE-222", ()).await?;

        vuln.set_title(Some("Jim's CVE".to_string()), ()).await?;

        let vuln = graph.ingest_vulnerability("CVE-333", ()).await?;

        vuln.set_title(Some("Jenß CVE".to_string()), ()).await?;

        let app = actix_web::test::init_service(
            App::new()
                .app_data(web::Data::from(graph.clone()))
                .configure(crate::endpoints::configure),
        )
        .await;

        let uri = "/api/v1/vulnerability?q=Bob";

        let request = TestRequest::get().uri(uri).to_request();

        let response: PaginatedResults<Vulnerability> =
            actix_web::test::call_and_read_body_json(&app, request).await;

        assert_eq!(1, response.items.len());

        Ok(())
    }
}


 */

#[cfg(test)]
mod test {
    use crate::model::advisory::AdvisorySummary;
    use crate::model::vulnerability::{VulnerabilityDetails, VulnerabilitySummary};
    use actix_web::test::TestRequest;
    use actix_web::App;
    use jsonpath_rust::JsonPathQuery;
    use serde_json::{json, Value};
    use test_context::test_context;
    use test_log::test;
    use time::OffsetDateTime;
    use trustify_common::db::test::TrustifyContext;
    use trustify_common::model::PaginatedResults;
    use trustify_cvss::cvss3::{
        AttackComplexity, AttackVector, Availability, Confidentiality, Cvss3Base, Integrity,
        PrivilegesRequired, Scope, UserInteraction,
    };
    use trustify_module_ingestor::graph::advisory::AdvisoryInformation;
    use trustify_module_ingestor::graph::Graph;

    #[test_context(TrustifyContext, skip_teardown)]
    #[test(actix_web::test)]
    async fn all_vulnerabilities(ctx: TrustifyContext) -> Result<(), anyhow::Error> {
        let db = ctx.db;
        let graph = Graph::new(db.clone());

        let app = actix_web::test::init_service(
            App::new().configure(|mut config| crate::endpoints::configure(config, db)),
        )
        .await;

        let advisory = graph
            .ingest_advisory(
                "RHSA-1",
                "http://redhat.com/",
                "8675309",
                AdvisoryInformation {
                    title: Some("RHSA-1".to_string()),
                    published: Some(OffsetDateTime::now_utc()),
                    modified: None,
                    withdrawn: None,
                },
                (),
            )
            .await?;

        let advisory_vuln = advisory.link_to_vulnerability("CVE-123", ()).await?;
        advisory_vuln
            .ingest_cvss3_score(
                Cvss3Base {
                    minor_version: 0,
                    av: AttackVector::Network,
                    ac: AttackComplexity::Low,
                    pr: PrivilegesRequired::None,
                    ui: UserInteraction::None,
                    s: Scope::Unchanged,
                    c: Confidentiality::None,
                    i: Integrity::None,
                    a: Availability::None,
                },
                (),
            )
            .await?;

        let advisory = graph
            .ingest_advisory(
                "RHSA-2",
                "http://redhat.com/",
                "8675319",
                AdvisoryInformation {
                    title: Some("RHSA-2".to_string()),
                    published: Some(OffsetDateTime::now_utc()),
                    modified: None,
                    withdrawn: None,
                },
                (),
            )
            .await?;

        let advisory_vuln = advisory.link_to_vulnerability("CVE-345", ()).await?;

        let uri = "/api/v1/vulnerability";

        let request = TestRequest::get().uri(uri).to_request();

        let response: PaginatedResults<VulnerabilitySummary> =
            actix_web::test::call_and_read_body_json(&app, request).await;

        assert_eq!(2, response.items.len());

        Ok(())
    }

    #[test_context(TrustifyContext, skip_teardown)]
    #[test(actix_web::test)]
    async fn one_vulnerability(ctx: TrustifyContext) -> Result<(), anyhow::Error> {
        let db = ctx.db;
        let graph = Graph::new(db.clone());

        let app = actix_web::test::init_service(
            App::new().configure(|mut config| crate::endpoints::configure(config, db)),
        )
        .await;

        let advisory = graph
            .ingest_advisory(
                "RHSA-1",
                "http://redhat.com/",
                "8675309",
                AdvisoryInformation {
                    title: Some("RHSA-1".to_string()),
                    published: Some(OffsetDateTime::now_utc()),
                    modified: None,
                    withdrawn: None,
                },
                (),
            )
            .await?;

        let advisory_vuln = advisory.link_to_vulnerability("CVE-123", ()).await?;
        advisory_vuln
            .ingest_cvss3_score(
                Cvss3Base {
                    minor_version: 0,
                    av: AttackVector::Network,
                    ac: AttackComplexity::Low,
                    pr: PrivilegesRequired::None,
                    ui: UserInteraction::None,
                    s: Scope::Unchanged,
                    c: Confidentiality::None,
                    i: Integrity::None,
                    a: Availability::None,
                },
                (),
            )
            .await?;

        let advisory = graph
            .ingest_advisory(
                "RHSA-2",
                "http://redhat.com/",
                "8675319",
                AdvisoryInformation {
                    title: Some("RHSA-2".to_string()),
                    published: Some(OffsetDateTime::now_utc()),
                    modified: None,
                    withdrawn: None,
                },
                (),
            )
            .await?;

        let advisory_vuln = advisory.link_to_vulnerability("CVE-345", ()).await?;

        let uri = "/api/v1/vulnerability/CVE-123";

        let request = TestRequest::get().uri(uri).to_request();

        let response: Value = actix_web::test::call_and_read_body_json(&app, request).await;

        let identifier = response.path("$.identifier").unwrap();

        assert_eq!(identifier, json!(["CVE-123"]));

        Ok(())
    }
}
