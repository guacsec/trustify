use crate::model::advisory::{AdvisoryHead, AdvisorySummary};
use serde::{Deserialize, Serialize};
use time::OffsetDateTime;
use trustify_common::advisory::AdvisoryVulnerabilityAssertions;
use trustify_common::paginated;
use trustify_entity::vulnerability::Model;
use utoipa::ToSchema;

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct VulnerabilityHead {
    pub identifier: String,
    pub title: Option<String>,
    pub published: Option<OffsetDateTime>,
    pub modified: Option<OffsetDateTime>,
    pub withdrawn: Option<OffsetDateTime>,
}

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct VulnerabilitySummary {
    #[serde(flatten)]
    pub head: VulnerabilityHead,
    #[serde(default)]
    pub advisories: Vec<VulnerabilityAdvisoryHead>,
}

paginated!(VulnerabilitySummary);

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct VulnerabilityDetails {
    #[serde(flatten)]
    pub head: VulnerabilityHead,
    pub advisories: Vec<VulnerabilityAdvisorySummary>,
}

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct VulnerabilityAdvisoryHead {
    #[serde(flatten)]
    pub head: AdvisoryHead,
}

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct VulnerabilityAdvisorySummary {
    #[serde(flatten)]
    pub head: VulnerabilityAdvisoryHead,
    #[schema(default, value_type = Vec < String >)]
    pub cvss3_scores: Vec<String>,
    #[serde(flatten)]
    pub assertions: AdvisoryVulnerabilityAssertions,
}
