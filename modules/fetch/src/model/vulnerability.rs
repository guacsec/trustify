use crate::model::advisory::AdvisoryVulnerabilitySummary;
use serde::{Deserialize, Serialize};
use time::OffsetDateTime;
use trustify_entity::vulnerability::Model;
use utoipa::ToSchema;

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct VulnerabilitySummary {
    pub identifier: String,
    pub title: Option<String>,
    pub advisories: Vec<VulnerabilityAdvisorySummary>,
}

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct VulnerabilityAdvisorySummary {
    pub identifier: String,
    pub sha256: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub published: Option<OffsetDateTime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub modified: Option<OffsetDateTime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub withdrawn: Option<OffsetDateTime>,
    pub title: Option<String>,
}
