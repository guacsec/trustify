use crate::error::Error;
use crate::model::advisory::AdvisorySummary;
use crate::model::vulnerability::{VulnerabilityDetails, VulnerabilitySummary};
use sea_orm::{prelude::*, EntityTrait, LoaderTrait, QueryFilter};
use std::collections::HashMap;
use trustify_common::advisory::{AdvisoryVulnerabilityAssertions, Assertion};
use trustify_common::db::limiter::LimiterTrait;
use trustify_common::db::Transactional;
use trustify_common::model::{Paginated, PaginatedResults};
use trustify_common::purl::Purl;
use trustify_cvss::cvss3::score::Score;
use trustify_cvss::cvss3::Cvss3Base;
use trustify_entity::{
    advisory, advisory_vulnerability, affected_package_version_range, cvss3, fixed_package_version,
    not_affected_package_version, package, package_version, package_version_range, vulnerability,
};
use trustify_module_search::model::SearchOptions;
use trustify_module_search::query::Query;

impl super::FetchService {
    pub(crate) async fn vulnerability_summaries<TX: AsRef<Transactional> + Sync + Send>(
        &self,
        vulnerabilities: &Vec<vulnerability::Model>,
        tx: TX,
    ) -> Result<Vec<VulnerabilitySummary>, Error> {
        let advisories = vulnerabilities
            .load_many(advisory::Entity::find(), &self.db.connection(&tx))
            .await?;

        let mut cvss3s = vulnerabilities
            .load_many(cvss3::Entity::find(), &self.db.connection(&tx))
            .await?;

        let mut vulnerability_summaries = Vec::new();

        for ((vuln, cvss3), advisories) in vulnerabilities
            .iter()
            .zip(cvss3s.iter())
            .zip(advisories.iter())
        {
            let score = if let Some(average) = cvss3
                .iter()
                .map(|e| {
                    let base = Cvss3Base::from(e.clone());
                    base.score().value()
                })
                .reduce(|accum, e| accum + e)
            {
                Score::new(average / cvss3.len() as f64)
            } else {
                Score::new(0.0)
            };
            vulnerability_summaries.push(VulnerabilitySummary {
                identifier: vuln.identifier.clone(),
                title: vuln.title.clone(),
                severity: score.severity().to_string(),
                score: score.value(),
                advisories: self.advisory_summaries(advisories, &tx).await?,
            });
        }

        Ok(vulnerability_summaries)
    }

    pub(crate) async fn vulnerability_summaries_for_advisory<
        TX: AsRef<Transactional> + Sync + Send,
    >(
        &self,
        vulnerabilities: &Vec<vulnerability::Model>,
        advisory_id: i32,
        tx: TX,
    ) -> Result<Vec<VulnerabilitySummary>, Error> {
        let mut cvss3s = vulnerabilities
            .load_many(
                cvss3::Entity::find().filter(cvss3::Column::AdvisoryId.eq(advisory_id)),
                &self.db.connection(&tx),
            )
            .await?;

        let mut vulnerability_summaries = Vec::new();

        for ((vuln, cvss3)) in vulnerabilities.iter().zip(cvss3s.iter()) {
            let score = if let Some(average) = cvss3
                .iter()
                .map(|e| {
                    let base = Cvss3Base::from(e.clone());
                    base.score().value()
                })
                .reduce(|accum, e| accum + e)
            {
                Score::new(average / cvss3.len() as f64)
            } else {
                Score::new(0.0)
            };
            vulnerability_summaries.push(VulnerabilitySummary {
                identifier: vuln.identifier.clone(),
                title: vuln.title.clone(),
                severity: score.severity().to_string(),
                score: score.value(),
                advisories: vec![],
            });
        }

        Ok(vulnerability_summaries)
    }

    pub async fn vulnerability_details<TX: AsRef<Transactional> + Sync + Send>(
        &self,
        vulnerabilities: &Vec<vulnerability::Model>,
        advisory_id: Option<i32>,
        tx: TX,
    ) -> Result<Vec<VulnerabilityDetails>, Error> {
        let mut fixed = vulnerabilities
            .load_many(
                advisory_id.map_or_else(fixed_package_version::Entity::find, |advisory_id| {
                    fixed_package_version::Entity::find()
                        .filter(fixed_package_version::Column::AdvisoryId.eq(advisory_id))
                }),
                &self.db.connection(&tx),
            )
            .await?;

        let mut affected = vulnerabilities
            .load_many(
                advisory_id.map_or_else(
                    affected_package_version_range::Entity::find,
                    |advisory_id| {
                        affected_package_version_range::Entity::find().filter(
                            affected_package_version_range::Column::AdvisoryId.eq(advisory_id),
                        )
                    },
                ),
                &self.db.connection(&tx),
            )
            .await?;

        let mut not_affected = vulnerabilities
            .load_many(
                advisory_id.map_or_else(
                    not_affected_package_version::Entity::find,
                    |advisory_id| {
                        not_affected_package_version::Entity::find().filter(
                            not_affected_package_version::Column::AdvisoryId.eq(advisory_id),
                        )
                    },
                ),
                &self.db.connection(&tx),
            )
            .await?;

        let mut cvss3s = vulnerabilities
            .load_many(
                cvss3::Entity::find().filter(cvss3::Column::AdvisoryId.eq(advisory_id)),
                &self.db.connection(&tx),
            )
            .await?;

        let mut vulnerability_details = Vec::new();

        let mut vulnerabilities = match advisory_id {
            None => self.vulnerability_summaries(vulnerabilities, &tx).await?,
            Some(advisory_id) => {
                self.vulnerability_summaries_for_advisory(vulnerabilities, advisory_id, &tx)
                    .await?
            }
        };

        for ((((vuln, mut fixed), mut affected), mut not_affected), mut cvss3) in vulnerabilities
            .drain(..)
            .zip(fixed.drain(..))
            .zip(affected.drain(..))
            .zip(not_affected.drain(..))
            .zip(cvss3s.drain(..))
        {
            let mut assertions = HashMap::new();

            'fixed: {
                let mut package_versions = fixed
                    .load_one(package_version::Entity, &self.db.connection(&tx))
                    .await?
                    .iter()
                    .flat_map(|e| e.clone())
                    .collect::<Vec<_>>();

                let mut packages = package_versions
                    .load_one(package::Entity, &self.db.connection(&tx))
                    .await?;

                packages.drain(..).zip(package_versions.drain(..)).for_each(
                    |(package, version)| {
                        if let Some(package) = package {
                            let package_assertions = assertions
                                .entry(
                                    Purl {
                                        ty: package.r#type,
                                        namespace: package.namespace,
                                        name: package.name,
                                        version: None,
                                        qualifiers: Default::default(),
                                    }
                                    .to_string(),
                                )
                                .or_insert(vec![]);

                            package_assertions.push(Assertion::Fixed {
                                version: version.version,
                            })
                        }
                    },
                );
            }

            'affected: {
                let mut package_version_ranges = affected
                    .load_one(package_version_range::Entity, &self.db.connection(&tx))
                    .await?
                    .iter()
                    .flat_map(|e| e.clone())
                    .collect::<Vec<_>>();

                let mut packages = package_version_ranges
                    .load_one(package::Entity, &self.db.connection(&tx))
                    .await?
                    .drain(..)
                    .collect::<Vec<_>>();

                packages
                    .drain(..)
                    .zip(package_version_ranges.drain(..))
                    .for_each(|(package, version_range)| {
                        if let Some(package) = package {
                            let package_assertions = assertions
                                .entry(
                                    Purl {
                                        ty: package.r#type,
                                        namespace: package.namespace,
                                        name: package.name,
                                        version: None,
                                        qualifiers: Default::default(),
                                    }
                                    .to_string(),
                                )
                                .or_insert(vec![]);

                            package_assertions.push(Assertion::Affected {
                                start_version: version_range.start,
                                end_version: version_range.end,
                            })
                        }
                    });
            }

            'not_affected: {
                let mut package_versions = not_affected
                    .load_one(package_version::Entity, &self.db.connection(&tx))
                    .await?
                    .iter()
                    .flat_map(|e| e.clone())
                    .collect::<Vec<_>>();

                let mut packages = package_versions
                    .load_one(package::Entity, &self.db.connection(&tx))
                    .await?
                    .drain(..)
                    .collect::<Vec<_>>();

                packages.drain(..).zip(package_versions.drain(..)).for_each(
                    |(package, version)| {
                        if let Some(package) = package {
                            let package_assertions = assertions
                                .entry(
                                    Purl {
                                        ty: package.r#type,
                                        namespace: package.namespace,
                                        name: package.name,
                                        version: None,
                                        qualifiers: Default::default(),
                                    }
                                    .to_string(),
                                )
                                .or_insert(vec![]);

                            package_assertions.push(Assertion::NotAffected {
                                version: version.version,
                            })
                        }
                    },
                );

                let cvss3_scores = cvss3
                    .drain(..)
                    .map(|e| Cvss3Base::from(e).to_string())
                    .collect();

                vulnerability_details.push(VulnerabilityDetails {
                    summary: vuln,
                    cvss3_scores,
                    assertions: AdvisoryVulnerabilityAssertions { assertions },
                })
            }
        }

        Ok(vulnerability_details)
    }

    pub async fn fetch_vulnerabilities<TX: AsRef<Transactional> + Sync + Send>(
        &self,
        search: SearchOptions,
        paginated: Paginated,
        tx: TX,
    ) -> Result<PaginatedResults<VulnerabilitySummary>, Error> {
        let connection = self.db.connection(&tx);

        let limiter = vulnerability::Entity::find().filtering(search)?.limiting(
            &connection,
            paginated.offset,
            paginated.limit,
        );

        let total = limiter.total().await?;

        let mut vulnerabilities = limiter.fetch().await?;

        let mut advisories = vulnerabilities
            .load_many_to_many(
                advisory::Entity,
                advisory_vulnerability::Entity,
                &self.db.connection(&tx),
            )
            .await?;

        let mut items = Vec::new();

        for (vuln, advisories) in vulnerabilities.drain(..).zip(advisories) {
            let advisories = self.advisory_summaries(&advisories, &tx).await?;

            items.push(VulnerabilitySummary {
                identifier: vuln.identifier,
                title: vuln.title,
                severity: "".to_string(),
                score: 0.0,
                advisories,
            });
        }

        Ok(PaginatedResults { items, total })
    }

    pub async fn fetch_vulnerability<TX: AsRef<Transactional> + Sync + Send>(
        &self,
        identifier: &str,
        tx: TX,
    ) -> Result<Option<VulnerabilityDetails>, Error> {
        let result = vulnerability::Entity::find()
            .filter(vulnerability::Column::Identifier.eq(identifier))
            .find_with_related(advisory::Entity)
            .all(&self.db.connection(&tx))
            .await?;

        if result.is_empty() {
            return Ok(None);
        }

        let (vuln, advisories) = &result[0];

        let advisories = self.advisory_summaries(advisories, tx).await?;

        Ok(Some(VulnerabilityDetails {
            summary: VulnerabilitySummary {
                identifier: "".to_string(),
                title: None,
                severity: "".to_string(),
                score: 0.0,
                advisories,
            },
            cvss3_scores: vec![],
            assertions: Default::default(),
        }))
    }
}
