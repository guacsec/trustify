use crate::graph::advisory::affected_package_version_range::AffectedPackageVersionRangeContext;
use crate::graph::advisory::fixed_package_version::FixedPackageVersionContext;
use crate::graph::advisory::not_affected_package_version::NotAffectedPackageVersionContext;
use crate::graph::advisory::AdvisoryContext;
use crate::graph::error::Error;
use sea_orm::{ActiveModelTrait, ColumnTrait, EntityTrait, QueryFilter, Set};
use trustify_common::db::Transactional;
use trustify_common::purl::Purl;
use trustify_entity as entity;

#[derive(Clone, Debug)]
pub struct AdvisoryVulnerabilityContext<'g> {
    pub advisory: AdvisoryContext<'g>,
    pub vulnerability: entity::advisory_vulnerability::Model,
}

impl<'g> From<(&AdvisoryContext<'g>, entity::advisory_vulnerability::Model)>
    for AdvisoryVulnerabilityContext<'g>
{
    fn from(
        (advisory, vulnerability): (&AdvisoryContext<'g>, entity::advisory_vulnerability::Model),
    ) -> Self {
        Self {
            advisory: advisory.clone(),
            vulnerability,
        }
    }
}

impl<'g> AdvisoryVulnerabilityContext<'g> {
    pub async fn get_fixed_package_version<TX: AsRef<Transactional>>(
        &self,
        purl: Purl,
        tx: TX,
    ) -> Result<Option<FixedPackageVersionContext>, Error> {
        if let Some(package_version) = self.advisory.graph.get_package_version(purl, &tx).await? {
            Ok(entity::fixed_package_version::Entity::find()
                .filter(
                    entity::fixed_package_version::Column::AdvisoryId.eq(self.advisory.advisory.id),
                )
                .filter(
                    entity::fixed_package_version::Column::PackageVersionId
                        .eq(package_version.package_version.id),
                )
                .one(&self.advisory.graph.connection(&tx))
                .await?
                .map(|affected| (self, affected).into()))
        } else {
            Ok(None)
        }
    }

    pub async fn get_not_affected_package_version<TX: AsRef<Transactional>>(
        &self,
        purl: Purl,
        tx: TX,
    ) -> Result<Option<NotAffectedPackageVersionContext>, Error> {
        if let Some(package_version) = self.advisory.graph.get_package_version(purl, &tx).await? {
            Ok(entity::not_affected_package_version::Entity::find()
                .filter(
                    entity::not_affected_package_version::Column::AdvisoryId
                        .eq(self.advisory.advisory.id),
                )
                .filter(
                    entity::not_affected_package_version::Column::PackageVersionId
                        .eq(package_version.package_version.id),
                )
                .one(&self.advisory.graph.connection(&tx))
                .await?
                .map(|not_affected_package_version| (self, not_affected_package_version).into()))
        } else {
            Ok(None)
        }
    }

    pub async fn get_affected_package_range<TX: AsRef<Transactional>>(
        &self,
        purl: Purl,
        start: &str,
        end: &str,
        tx: TX,
    ) -> Result<Option<AffectedPackageVersionRangeContext>, Error> {
        if let Some(package_version_range) = self
            .advisory
            .graph
            .get_package_version_range(purl.clone(), start, end, &tx)
            .await?
        {
            Ok(entity::affected_package_version_range::Entity::find()
                .filter(
                    entity::affected_package_version_range::Column::AdvisoryId
                        .eq(self.advisory.advisory.id),
                )
                .filter(
                    entity::affected_package_version_range::Column::PackageVersionRangeId
                        .eq(package_version_range.package_version_range.id),
                )
                .one(&self.advisory.graph.connection(&tx))
                .await?
                .map(|affected| (self, affected).into()))
        } else {
            Ok(None)
        }
    }

    pub async fn ingest_not_affected_package_version<TX: AsRef<Transactional>>(
        &self,
        purl: Purl,
        tx: TX,
    ) -> Result<NotAffectedPackageVersionContext, Error> {
        if let Some(found) = self
            .get_not_affected_package_version(purl.clone(), &tx)
            .await?
        {
            return Ok(found);
        }

        let package_version = self
            .advisory
            .graph
            .ingest_package_version(purl, &tx)
            .await?;

        let entity = entity::not_affected_package_version::ActiveModel {
            id: Default::default(),
            advisory_id: Set(self.advisory.advisory.id),
            package_version_id: Set(package_version.package_version.id),
        };

        Ok((
            self,
            entity.insert(&self.advisory.graph.connection(&tx)).await?,
        )
            .into())
    }

    pub async fn ingest_fixed_package_version<TX: AsRef<Transactional>>(
        &self,
        purl: Purl,
        tx: TX,
    ) -> Result<FixedPackageVersionContext, Error> {
        if let Some(found) = self.get_fixed_package_version(purl.clone(), &tx).await? {
            return Ok(found);
        }

        let package_version = self
            .advisory
            .graph
            .ingest_package_version(purl, &tx)
            .await?;

        let entity = entity::fixed_package_version::ActiveModel {
            id: Default::default(),
            advisory_id: Set(self.advisory.advisory.id),
            package_version_id: Set(package_version.package_version.id),
        };

        Ok((
            self,
            entity.insert(&self.advisory.graph.connection(&tx)).await?,
        )
            .into())
    }

    pub async fn ingest_affected_package_range<TX: AsRef<Transactional>>(
        &self,
        purl: Purl,
        start: &str,
        end: &str,
        tx: TX,
    ) -> Result<AffectedPackageVersionRangeContext, Error> {
        if let Some(found) = self
            .get_affected_package_range(purl.clone(), start, end, &tx)
            .await?
        {
            return Ok(found);
        }

        let package_version_range = self
            .advisory
            .graph
            .ingest_package_version_range(purl, start, end, &tx)
            .await?;

        let entity = entity::affected_package_version_range::ActiveModel {
            id: Default::default(),
            advisory_id: Set(self.advisory.advisory.id),
            package_version_range_id: Set(package_version_range.package_version_range.id),
        };

        Ok((
            self,
            entity.insert(&self.advisory.graph.connection(&tx)).await?,
        )
            .into())
    }
}
