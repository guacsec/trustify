use sea_orm::{prelude::*, EntityTrait, QueryFilter};

use crate::Error;
use trustify_common::db::limiter::LimiterTrait;
use trustify_common::db::query::{Filtering, Query};
use trustify_common::db::Database;
use trustify_common::db::Transactional;
use trustify_common::model::{Paginated, PaginatedResults};
use trustify_entity::vulnerability;
use trustify_model::vulnerability::{VulnerabilityDetails, VulnerabilitySummary};

pub struct VulnerabilityService {
    db: Database,
}

impl VulnerabilityService {
    pub fn new(db: Database) -> Self {
        Self { db }
    }

    pub async fn fetch_vulnerabilities<TX: AsRef<Transactional> + Sync + Send>(
        &self,
        search: Query,
        paginated: Paginated,
        tx: TX,
    ) -> Result<PaginatedResults<VulnerabilitySummary>, Error> {
        let connection = self.db.connection(&tx);

        let limiter = vulnerability::Entity::find().filtering(search)?.limiting(
            &connection,
            paginated.offset,
            paginated.limit,
        );

        let total = limiter.total().await?;

        Ok(PaginatedResults {
            total,
            items: VulnerabilitySummary::from_entities(&limiter.fetch().await?, &connection)
                .await?,
        })
    }

    pub async fn fetch_vulnerability<TX: AsRef<Transactional> + Sync + Send>(
        &self,
        identifier: &str,
        tx: TX,
    ) -> Result<Option<VulnerabilityDetails>, Error> {
        let connection = self.db.connection(&tx);

        if let Some(vulnerability) = vulnerability::Entity::find()
            .filter(vulnerability::Column::Identifier.eq(identifier))
            .one(&connection)
            .await?
        {
            Ok(VulnerabilityDetails::from_entity(&vulnerability, &connection).await?)
        } else {
            Ok(None)
        }
    }
}
