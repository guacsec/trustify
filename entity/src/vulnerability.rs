use crate::{advisory_vulnerability, vulnerability_description};
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]
#[sea_orm(table_name = "vulnerability")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub identifier: String,
    pub title: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::advisory_vulnerability::Entity")]
    AdvisoryVulnerabilities,
    #[sea_orm(has_many = "super::vulnerability_description::Entity")]
    Descriptions,
}

impl Related<advisory_vulnerability::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdvisoryVulnerabilities.def()
    }
}

impl Related<vulnerability_description::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Descriptions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
