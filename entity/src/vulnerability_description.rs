use crate::vulnerability;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]
#[sea_orm(table_name = "vulnerability_description")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: Uuid,
    pub vulnerability_id: String,
    pub lang: String,
    pub description: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
    belongs_to = "super::vulnerability::Entity",
    from = "super::vulnerability_description::Column::VulnerabilityId"
    to = "super::vulnerability::Column::Id")]
    Vulnerability,
}

impl Related<vulnerability::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Vulnerability.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
