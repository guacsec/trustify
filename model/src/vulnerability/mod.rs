use serde::{Deserialize, Serialize};
use time::OffsetDateTime;
use utoipa::ToSchema;

pub use details::*;
pub use summary::*;
use trustify_common::db::ConnectionOrTransaction;
use trustify_entity::vulnerability;

use crate::Error;

mod details;
mod summary;

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct VulnerabilityHead {
    pub identifier: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub published: Option<OffsetDateTime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub modified: Option<OffsetDateTime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[serde(with = "time::serde::rfc3339::option")]
    pub withdrawn: Option<OffsetDateTime>,
}

impl VulnerabilityHead {
    pub async fn from_entity(
        entity: &vulnerability::Model,
        _tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Self, Error> {
        Ok(Self {
            identifier: entity.identifier.clone(),
            title: entity.title.clone(),
            published: entity.published,
            modified: entity.modified,
            withdrawn: entity.withdrawn,
        })
    }

    pub async fn from_entities(
        entities: &[vulnerability::Model],
        _tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Vec<Self>, Error> {
        Ok(entities
            .iter()
            .map(|vuln| Self {
                identifier: vuln.identifier.clone(),
                title: vuln.title.clone(),
                published: vuln.published,
                modified: vuln.modified,
                withdrawn: vuln.withdrawn,
            })
            .collect())
    }
}
