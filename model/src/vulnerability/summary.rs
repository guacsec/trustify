use crate::vulnerability::details::VulnerabilityAdvisoryHead;
use crate::vulnerability::VulnerabilityHead;
use crate::Error;
use sea_orm::{EntityTrait, LoaderTrait};
use serde::{Deserialize, Serialize};
use trustify_common::db::ConnectionOrTransaction;
use trustify_common::paginated;
use trustify_entity::{advisory, advisory_vulnerability, vulnerability};
use utoipa::ToSchema;

#[derive(Serialize, Deserialize, Debug, Clone, ToSchema)]
pub struct VulnerabilitySummary {
    #[serde(flatten)]
    pub head: VulnerabilityHead,
    #[serde(default)]
    pub advisories: Vec<VulnerabilityAdvisoryHead>,
}

paginated!(VulnerabilitySummary);

impl VulnerabilitySummary {
    pub async fn from_entities(
        vulnerabilities: &[vulnerability::Model],
        tx: &ConnectionOrTransaction<'_>,
    ) -> Result<Vec<Self>, Error> {
        let advisories = vulnerabilities
            .load_many_to_many(advisory::Entity::find(), advisory_vulnerability::Entity, tx)
            .await?;

        let mut summaries = Vec::new();

        for (vuln, advisories) in vulnerabilities.iter().zip(advisories.iter()) {
            summaries.push(VulnerabilitySummary {
                head: VulnerabilityHead {
                    identifier: vuln.identifier.clone(),
                    title: vuln.title.clone(),
                    published: vuln.published,
                    modified: vuln.modified,
                    withdrawn: vuln.withdrawn,
                },
                advisories: VulnerabilityAdvisoryHead::from_entities(advisories, tx).await?,
            });
        }

        Ok(summaries)
    }
}
